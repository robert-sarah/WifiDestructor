#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üé£ ULTIMATE PHISHING TOOL v4.0 - GUI
Interface Tkinter moderne pour le pentest avanc√©
"""

import tkinter as tk
from tkinter import BOTH, X, ttk, messagebox, filedialog, scrolledtext, simpledialog
import threading
import os
import json
import time
from datetime import datetime
import webbrowser

# Import des modules avec gestion d'erreurs cross-platform
import sys
import platform
import subprocess

def check_system_dependencies():
    """V√©rifie les d√©pendances syst√®me selon l'OS"""
    os_type = platform.system().lower()
    missing_tools = []
    optional_tools = []
    
    # Outils CRITIQUES selon l'OS (n√©cessaires pour le bon fonctionnement)
    critical_tools = {
        'linux': ['nmap'],  # Seul nmap est critique
        'darwin': ['nmap'],  # macOS - seul nmap est critique
        'windows': ['nmap']  # Windows - seul nmap est critique
    }
    
    # Outils OPTIONNELS selon l'OS (am√©liorent les fonctionnalit√©s)
    optional_tools_list = {
        'linux': ['aircrack-ng', 'masscan'],
        'darwin': ['aircrack-ng', 'masscan'],
        'windows': ['aircrack-ng', 'masscan']  # Optionnel sur Windows
    }
    
    critical_to_check = critical_tools.get(os_type, [])
    optional_to_check = optional_tools_list.get(os_type, [])
    
    print("üîç V√©rification des outils critiques...")
    
    # V√©rifier les outils critiques
    for tool in critical_to_check:
        if check_tool_availability(tool, "critique"):
            pass  # Outil disponible
        else:
            missing_tools.append(tool)
    
    print("\nüîç V√©rification des outils optionnels...")
    
    # V√©rifier les outils optionnels
    for tool in optional_to_check:
        if check_tool_availability(tool, "optionnel"):
            pass  # Outil disponible
        else:
            optional_tools.append(tool)
    
    # Afficher un r√©sum√©
    if missing_tools:
        print(f"\n‚ö†Ô∏è Outils critiques manquants: {', '.join(missing_tools)}")
        print("üí° Ces outils sont n√©cessaires pour le bon fonctionnement")
    else:
        print("\n‚úÖ Tous les outils critiques sont disponibles")
    
    if optional_tools:
        print(f"üìã Outils optionnels non disponibles: {', '.join(optional_tools)}")
        print("üí° Ces outils am√©liorent les fonctionnalit√©s mais ne sont pas critiques")
    
    return missing_tools, optional_tools

def check_tool_availability(tool, tool_type):
    """V√©rifie si un outil est disponible avec plusieurs m√©thodes"""
    # Essayer diff√©rentes commandes de v√©rification
    version_commands = [
        [tool, '--version'],
        [tool, '-V'],
        [tool, '--help'],
        [tool, 'version'],
        [tool, '--v'],
        [tool, '-h']
    ]
    
    for cmd in version_commands:
        try:
            result = subprocess.run(cmd, 
                                 capture_output=True, 
                                 check=True, 
                                 timeout=3)
            print(f"‚úÖ {tool} disponible ({tool_type})")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError, subprocess.TimeoutExpired):
            continue
    
    # Si aucune commande n'a fonctionn√©, essayer avec 'which' (Linux/macOS)
    if platform.system().lower() in ['linux', 'darwin']:
        try:
            result = subprocess.run(['which', tool], 
                                 capture_output=True, 
                                 check=True, 
                                 timeout=2)
            print(f"‚úÖ {tool} disponible ({tool_type})")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError, subprocess.TimeoutExpired):
            pass
    
    # Si aucune m√©thode n'a fonctionn√©
    if tool_type == "critique":
        print(f"‚ùå {tool} manquant (CRITIQUE)")
    else:
        print(f"‚ö†Ô∏è {tool} non disponible (optionnel)")
    
    return False

def install_dependencies():
    """Installe les d√©pendances manquantes"""
    try:
        # V√©rifier les d√©pendances syst√®me
        missing_critical, missing_optional = check_system_dependencies()
        
        # Seulement signaler les outils critiques manquants
        if missing_critical:
            print(f"‚ö†Ô∏è Outils critiques manquants: {', '.join(missing_critical)}")
            print("üì¶ Installation des d√©pendances Python...")
        
        # Installer les d√©pendances Python
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ D√©pendances Python install√©es avec succ√®s")
        
        # Instructions pour les outils critiques manquants
        if missing_critical:
            os_type = platform.system().lower()
            print("\nüìã Instructions d'installation des outils critiques:")
            
            if os_type in ['linux', 'darwin']:
                print("  Debian/Ubuntu: sudo apt-get install nmap")
                print("  macOS: brew install nmap")
            elif os_type == 'windows':
                print("  Windows: T√©l√©chargez nmap depuis https://nmap.org/download.html")
        
        # Instructions pour les outils optionnels (informatives seulement)
        if missing_optional:
            os_type = platform.system().lower()
            print(f"\nüìã Outils optionnels non disponibles: {', '.join(missing_optional)}")
            print("üí° Ces outils am√©liorent les fonctionnalit√©s mais ne sont pas critiques")
            
            if os_type in ['linux', 'darwin']:
                print("  Pour installer les outils optionnels:")
                print("  Debian/Ubuntu: sudo apt-get install aircrack-ng masscan")
                print("  macOS: brew install aircrack-ng masscan")
            elif os_type == 'windows':
                print("  Windows: Ces outils sont optionnels sur Windows")
        
    except Exception as e:
        print(f"‚ùå Erreur installation: {e}")
        print("üí° Essayez d'ex√©cuter: bash install.sh")

# Import des modules avec gestion d'erreurs
try:
    from core.phishing_core import PhishingCore
    from core.advanced_attacks import AdvancedAttacks
    from core.site_cloner import SiteCloner
    from core.tunnel_manager import TunnelManager
    from core.wifi_attacks import WifiAttacks
    from core.network_scanner import NetworkScanner
    from core.payload_generator import PayloadGenerator
    from core.backdoor_creator import BackdoorCreator
    from core.exploit_framework import ExploitFramework
    from core.social_engineering import SocialEngineering
    from core.stealth_operations import StealthOperations
    from core.advanced_malware import AdvancedMalware
    from core.zero_day_exploits import ZeroDayExploits
    from core.advanced_persistence import AdvancedPersistence
    from core.web_exploitation import WebExploitation
    from core.osint_framework import OSINTFramework
    from core.active_directory import ActiveDirectoryAttacks
except ImportError as e:
    print(f"‚ùå Erreur import: {e}")
    print("üì¶ Installation des modules manquants...")
    install_dependencies()
    # R√©essayer l'import
    try:
        from core.phishing_core import PhishingCore
        from core.advanced_attacks import AdvancedAttacks
        from core.site_cloner import SiteCloner
        from core.tunnel_manager import TunnelManager
        from core.wifi_attacks import WifiAttacks
        from core.network_scanner import NetworkScanner
        from core.payload_generator import PayloadGenerator
        from core.backdoor_creator import BackdoorCreator
        from core.exploit_framework import ExploitFramework
        from core.social_engineering import SocialEngineering
        from core.stealth_operations import StealthOperations
        from core.advanced_malware import AdvancedMalware
        from core.zero_day_exploits import ZeroDayExploits
        from core.advanced_persistence import AdvancedPersistence
        from core.web_exploitation import WebExploitation
        from core.osint_framework import OSINTFramework
        from core.active_directory import ActiveDirectoryAttacks
    except ImportError:
        print("‚ùå Impossible de charger les modules. V√©rifiez l'installation.")
        sys.exit(1)

class UltimatePhishingGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üé£ ULTIMATE PHISHING TOOL v4.0")
        self.root.geometry("1200x800")
        self.root.configure(bg='#1e1e1e')
        
        # D√©tection du syst√®me d'exploitation
        self.os_type = platform.system().lower()
        print(f"üñ•Ô∏è Syst√®me d√©tect√©: {self.os_type}")
        
        # V√©rification des permissions et d√©pendances
        self.check_permissions_and_dependencies()
        
        # Initialisation des modules avec gestion d'erreurs
        try:
            self.phishing = PhishingCore()
            self.attacks = AdvancedAttacks()
            self.cloner = SiteCloner()
            self.tunnels = TunnelManager()
            self.wifi = WifiAttacks()
            self.scanner = NetworkScanner()
            self.payload = PayloadGenerator()
            self.backdoor = BackdoorCreator()
            self.exploit = ExploitFramework()
            self.social = SocialEngineering()
            self.stealth = StealthOperations()
            self.malware = AdvancedMalware()
            self.zero_day = ZeroDayExploits()
            self.persistence = AdvancedPersistence()
            self.web_exploit = WebExploitation()
            self.osint = OSINTFramework()
            self.ad_attacks = ActiveDirectoryAttacks()
        except Exception as e:
            print(f"‚ùå Erreur initialisation modules: {e}")
            messagebox.showerror("Erreur", f"Erreur initialisation: {e}")
        
        # Variables
        self.server_running = False
        self.selected_template = None
        self.current_tunnel = None
        
        # Style moderne
        self.setup_styles()
        
        # Interface
        self.setup_ui()
        
        # D√©marrer les mises √† jour
        self.update_stats()
        
    def check_permissions_and_dependencies(self):
        """V√©rifie les permissions et d√©pendances selon l'OS"""
        print("üîç V√©rification des permissions et d√©pendances...")
        
        # V√©rifier les permissions selon l'OS
        if self.os_type in ['linux', 'darwin']:
            # V√©rifier si on peut ex√©cuter des commandes syst√®me
            try:
                result = subprocess.run(['whoami'], capture_output=True, text=True, timeout=5)
                current_user = result.stdout.strip()
                print(f"üë§ Utilisateur actuel: {current_user}")
                
                # V√©rifier les permissions WiFi
                if self.os_type == 'linux':
                    try:
                        # V√©rifier si l'utilisateur est dans le groupe netdev
                        result = subprocess.run(['groups'], capture_output=True, text=True, timeout=5)
                        groups = result.stdout.strip()
                        if 'netdev' in groups:
                            print("‚úÖ Permissions WiFi configur√©es")
                        else:
                            print("‚ö†Ô∏è Permissions WiFi limit√©es - certaines fonctionnalit√©s n√©cessitent sudo")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Impossible de v√©rifier les groupes: {e}")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur v√©rification utilisateur: {e}")
                
        elif self.os_type == 'windows':
            # V√©rifier les permissions Windows
            try:
                import ctypes
                is_admin = ctypes.windll.shell32.IsUserAnAdmin()
                if is_admin:
                    print("‚úÖ Ex√©cution en tant qu'administrateur")
                else:
                    print("‚ö†Ô∏è Ex√©cution en tant qu'utilisateur normal - certaines fonctionnalit√©s peuvent √™tre limit√©es")
            except Exception as e:
                print(f"‚ö†Ô∏è Impossible de v√©rifier les permissions Windows: {e}")
        
        # V√©rifier les d√©pendances syst√®me
        missing_critical, missing_optional = check_system_dependencies()
        if missing_critical:
            print(f"‚ö†Ô∏è Outils critiques manquants: {', '.join(missing_critical)}")
            print("üí° Ces outils sont n√©cessaires pour le bon fonctionnement")
            print("üí° Ex√©cutez 'bash install.sh' pour installer automatiquement")
        else:
            print("‚úÖ Tous les outils critiques sont disponibles")
        
        if missing_optional:
            print(f"üìã Outils optionnels non disponibles: {', '.join(missing_optional)}")
            print("üí° Ces outils am√©liorent les fonctionnalit√©s mais ne sont pas critiques")
        
    def setup_styles(self):
        """Configure les styles modernes"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # Couleurs
        self.colors = {
            'bg': '#1e1e1e',
            'fg': '#ffffff',
            'accent': '#00ff88',
            'secondary': '#2d2d2d',
            'danger': '#ff4444',
            'warning': '#ffaa00',
            'success': '#00ff88'
        }
        
        # Configuration des styles
        style.configure('Title.TLabel', 
                       background=self.colors['bg'], 
                       foreground=self.colors['accent'],
                       font=('Arial', 16, 'bold'))
        
        style.configure('Card.TFrame', 
                       background=self.colors['secondary'],
                       relief='raised',
                       borderwidth=2)
        
        style.configure('Success.TButton',
                       background=self.colors['success'],
                       foreground='black')
        
        style.configure('Danger.TButton',
                       background=self.colors['danger'],
                       foreground='white')
        
    def setup_ui(self):
        """Configure l'interface utilisateur"""
        # Frame principal
        main_frame = tk.Frame(self.root, bg=self.colors['bg'])
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Titre
        title_label = tk.Label(main_frame, 
                              text="üé£ ULTIMATE PHISHING TOOL v4.0",
                              font=('Arial', 20, 'bold'),
                              bg=self.colors['bg'],
                              fg=self.colors['accent'])
        title_label.pack(pady=(0, 20))
        
        # Notebook pour les onglets
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill='both', expand=True)
        
        # Onglets
        self.setup_phishing_tab()
        self.setup_clone_tab()
        self.setup_wifi_tab()
        self.setup_network_tab()
        self.setup_payload_tab()
        self.setup_backdoor_tab()
        self.setup_attacks_tab()
        self.setup_tunnels_tab()
        self.setup_stats_tab()
        self.setup_settings_tab()
        self.setup_exploit_tab()
        self.setup_social_tab()
        self.setup_stealth_tab()
        self.setup_malware_tab()
        self.setup_zero_day_tab()
        self.setup_persistence_tab()
        self.setup_web_exploitation_tab()
        self.setup_osint_tab()
        self.setup_ad_tab()
        
    def setup_phishing_tab(self):
        """Onglet phishing classique"""
        phishing_frame = ttk.Frame(self.notebook)
        self.notebook.add(phishing_frame, text="üéØ Phishing")
        
        # Frame gauche - Templates
        left_frame = ttk.Frame(phishing_frame)
        left_frame.pack(side='left', fill='both', expand=True, padx=10, pady=10)
        
        # Titre templates
        tk.Label(left_frame, text="üìã Templates Disponibles", 
                font=('Arial', 14, 'bold'),
                bg=self.colors['bg'], fg=self.colors['fg']).pack(pady=(0, 10))
        
        # Liste des templates
        self.template_listbox = tk.Listbox(left_frame, 
                                          bg=self.colors['secondary'],
                                          fg=self.colors['fg'],
                                          selectbackground=self.colors['accent'],
                                          height=15)
        self.template_listbox.pack(fill='both', expand=True)
        
        # Boutons templates
        template_buttons_frame = tk.Frame(left_frame, bg=self.colors['bg'])
        template_buttons_frame.pack(fill='x', pady=10)
        
        tk.Button(template_buttons_frame, text="üîÑ Actualiser", 
                 command=self.refresh_templates,
                 bg=self.colors['accent'], fg='black').pack(side='left', padx=5)
        
        tk.Button(template_buttons_frame, text="üìÅ Ouvrir Dossier", 
                 command=self.open_templates_folder,
                 bg=self.colors['secondary'], fg=self.colors['fg']).pack(side='left', padx=5)
        
        # Frame droite - Serveur
        right_frame = ttk.Frame(phishing_frame)
        right_frame.pack(side='right', fill='both', expand=True, padx=10, pady=10)
        
        # Configuration serveur
        server_frame = ttk.LabelFrame(right_frame, text="‚öôÔ∏è Configuration Serveur")
        server_frame.pack(fill='x', pady=(0, 10))
        
        # Host
        tk.Label(server_frame, text="Host:", bg=self.colors['bg'], fg=self.colors['fg']).pack(anchor='w')
        self.host_entry = tk.Entry(server_frame, bg=self.colors['secondary'], fg=self.colors['fg'])
        self.host_entry.insert(0, "0.0.0.0")
        self.host_entry.pack(fill='x', pady=(0, 10))
        
        # Port
        tk.Label(server_frame, text="Port:", bg=self.colors['bg'], fg=self.colors['fg']).pack(anchor='w')
        self.port_entry = tk.Entry(server_frame, bg=self.colors['secondary'], fg=self.colors['fg'])
        self.port_entry.insert(0, "8080")
        self.port_entry.pack(fill='x', pady=(0, 10))
        
        # Boutons serveur
        server_buttons_frame = tk.Frame(server_frame, bg=self.colors['bg'])
        server_buttons_frame.pack(fill='x', pady=10)
        
        self.start_server_btn = tk.Button(server_buttons_frame, text="üöÄ D√©marrer Serveur",
                                         command=self.start_server,
                                         bg=self.colors['success'], fg='black')
        self.start_server_btn.pack(side='left', padx=5)
        
        self.stop_server_btn = tk.Button(server_buttons_frame, text="‚èπÔ∏è Arr√™ter Serveur",
                                        command=self.stop_server,
                                        bg=self.colors['danger'], fg='white',
                                        state='disabled')
        self.stop_server_btn.pack(side='left', padx=5)
        
        # URL du serveur
        self.server_url_label = tk.Label(server_frame, text="URL: Non d√©marr√©",
                                        bg=self.colors['bg'], fg=self.colors['warning'])
        self.server_url_label.pack(pady=10)
        
        # Charger les templates
        self.refresh_templates()
         
    def setup_wifi_tab(self):
        """Onglet attaques WiFi"""
        wifi_frame = ttk.Frame(self.notebook)
        self.notebook.add(wifi_frame, text="üì° WiFi")
        
        # Frame principale
        main_wifi_frame = tk.Frame(wifi_frame, bg=self.colors['bg'])
        main_wifi_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Titre
        tk.Label(main_wifi_frame, text="üì° Attaques WiFi Avanc√©es",
                font=('Arial', 16, 'bold'),
                bg=self.colors['bg'], fg=self.colors['accent']).pack(pady=(0, 20))
        
        # Configuration WiFi
        wifi_config_frame = ttk.LabelFrame(main_wifi_frame, text="‚öôÔ∏è Configuration WiFi")
        wifi_config_frame.pack(fill='x', pady=(0, 20))
        
        # Interface WiFi
        tk.Label(wifi_config_frame, text="Interface WiFi:", 
                bg=self.colors['bg'], fg=self.colors['fg']).pack(anchor='w', padx=10)
        
        self.wifi_interface_entry = tk.Entry(wifi_config_frame, bg=self.colors['secondary'], fg=self.colors['fg'])
        self.wifi_interface_entry.pack(fill='x', padx=10, pady=5)
        self.wifi_interface_entry.insert(0, "wlan0" if self.os_type != "windows" else "Wi-Fi")
        
        # Boutons WiFi
        wifi_buttons_frame = tk.Frame(main_wifi_frame, bg=self.colors['bg'])
        wifi_buttons_frame.pack(fill='x', pady=(0, 20))
        
        wifi_buttons = [
            ("üì° Scan R√©seaux", self.scan_wifi_networks),
            ("üíÄ Deauth Attack", self.deauth_attack),
            ("ü§ù Capture Handshake", self.capture_handshake),
            ("üîì Crack Handshake", self.crack_handshake),
            ("üì° Fake AP", self.create_fake_ap),
            ("üëø Evil Twin", self.evil_twin_attack),
            ("üîë WPS Attack", self.wps_attack)
        ]
        
        for i, (text, command) in enumerate(wifi_buttons):
            btn = tk.Button(wifi_buttons_frame, text=text, command=command,
                           bg=self.colors['accent'], fg='black',
                           font=('Arial', 10, 'bold'))
            btn.grid(row=i//3, column=i%3, padx=5, pady=5, sticky='ew')
        
        wifi_buttons_frame.grid_columnconfigure(0, weight=1)
        wifi_buttons_frame.grid_columnconfigure(1, weight=1)
        wifi_buttons_frame.grid_columnconfigure(2, weight=1)
        
        # Log WiFi
        wifi_log_frame = ttk.LabelFrame(main_wifi_frame, text="üìã Log WiFi")
        wifi_log_frame.pack(fill='both', expand=True)
        
        self.wifi_log = scrolledtext.ScrolledText(wifi_log_frame, 
                                                 bg=self.colors['secondary'],
                                                 fg=self.colors['fg'],
                                                 height=10)
        self.wifi_log.pack(fill='both', expand=True, padx=10, pady=10)
         
    def setup_network_tab(self):
        """Onglet scan r√©seau"""
        network_frame = ttk.Frame(self.notebook)
        self.notebook.add(network_frame, text="üåê Network")
         
        # Frame principale
        main_network_frame = tk.Frame(network_frame, bg=self.colors['bg'])
        main_network_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Titre
        tk.Label(main_network_frame, text="üåê Scanner R√©seau Avanc√©",
                font=('Arial', 16, 'bold'),
                bg=self.colors['bg'], fg=self.colors['accent']).pack(pady=(0, 20))
        
        # Configuration r√©seau
        network_config_frame = ttk.LabelFrame(main_network_frame, text="üéØ Configuration")
        network_config_frame.pack(fill='x', pady=(0, 20))
        
        # Cible
        tk.Label(network_config_frame, text="Cible (IP/r√©seau):", 
                bg=self.colors['bg'], fg=self.colors['fg']).pack(anchor='w', padx=10)
        
        self.network_target_entry = tk.Entry(network_config_frame, bg=self.colors['secondary'], fg=self.colors['fg'])
        self.network_target_entry.pack(fill='x', padx=10, pady=5)
        self.network_target_entry.insert(0, "192.168.1.0/24")
        
        # Boutons r√©seau
        network_buttons_frame = tk.Frame(main_network_frame, bg=self.colors['bg'])
        network_buttons_frame.pack(fill='x', pady=(0, 20))
        
        network_buttons = [
            ("üîç Quick Scan", self.quick_network_scan),
            ("üîç Full Scan", self.full_network_scan),
            ("‚ö° Masscan", self.masscan_scan),
            ("üîç Service Enum", self.service_enumeration),
            ("üåê Web Enum", self.web_enumeration),
            ("üîç DNS Enum", self.dns_enumeration),
            ("üîç Subdomain Enum", self.subdomain_enumeration),
            ("üîç Vuln Scan", self.vulnerability_scan)
        ]
        
        for i, (text, command) in enumerate(network_buttons):
            btn = tk.Button(network_buttons_frame, text=text, command=command,
                           bg=self.colors['accent'], fg='black',
                           font=('Arial', 10, 'bold'))
            btn.grid(row=i//4, column=i%4, padx=5, pady=5, sticky='ew')
        
        for i in range(4):
            network_buttons_frame.grid_columnconfigure(i, weight=1)
        
        # Log r√©seau
        network_log_frame = ttk.LabelFrame(main_network_frame, text="üìã Log R√©seau")
        network_log_frame.pack(fill='both', expand=True)
        
        self.network_log = scrolledtext.ScrolledText(network_log_frame, 
                                                    bg=self.colors['secondary'],
                                                    fg=self.colors['fg'],
                                                    height=10)
        self.network_log.pack(fill='both', expand=True, padx=10, pady=10)
         
    def setup_payload_tab(self):
        """Onglet g√©n√©ration de payloads"""
        payload_frame = ttk.Frame(self.notebook)
        self.notebook.add(payload_frame, text="üí£ Payloads")
         
        # Frame principale
        main_payload_frame = tk.Frame(payload_frame, bg=self.colors['bg'])
        main_payload_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Titre
        tk.Label(main_payload_frame, text="üí£ G√©n√©rateur de Payloads",
                font=('Arial', 16, 'bold'),
                bg=self.colors['bg'], fg=self.colors['accent']).pack(pady=(0, 20))
        
        # Configuration payload
        payload_config_frame = ttk.LabelFrame(main_payload_frame, text="‚öôÔ∏è Configuration")
        payload_config_frame.pack(fill='x', pady=(0, 20))
        
        # LHOST
        tk.Label(payload_config_frame, text="LHOST:", 
                bg=self.colors['bg'], fg=self.colors['fg']).pack(anchor='w', padx=10)
        
        self.lhost_entry = tk.Entry(payload_config_frame, bg=self.colors['secondary'], fg=self.colors['fg'])
        self.lhost_entry.pack(fill='x', padx=10, pady=5)
        self.lhost_entry.insert(0, "192.168.1.100")
        
        # LPORT
        tk.Label(payload_config_frame, text="LPORT:", 
                bg=self.colors['bg'], fg=self.colors['fg']).pack(anchor='w', padx=10)
        
        self.lport_entry = tk.Entry(payload_config_frame, bg=self.colors['secondary'], fg=self.colors['fg'])
        self.lport_entry.pack(fill='x', padx=10, pady=5)
        self.lport_entry.insert(0, "4444")
        
        # Boutons payload
        payload_buttons_frame = tk.Frame(main_payload_frame, bg=self.colors['bg'])
        payload_buttons_frame.pack(fill='x', pady=(0, 20))
        
        payload_buttons = [
            ("üñ•Ô∏è Windows Reverse", lambda: self.generate_payload("windows_reverse")),
            ("üêß Linux Reverse", lambda: self.generate_payload("linux_reverse")),
            ("üì± Android Reverse", lambda: self.generate_payload("android_reverse")),
            ("üñ•Ô∏è Windows Bind", lambda: self.generate_payload("windows_bind")),
            ("üêß Linux Bind", lambda: self.generate_payload("linux_bind")),
            ("üåê PHP Web Shell", lambda: self.generate_payload("php_webshell")),
            ("üíª PowerShell", lambda: self.generate_payload("powershell")),
            ("üêç Python", lambda: self.generate_payload("python"))
        ]
        
        for i, (text, command) in enumerate(payload_buttons):
            btn = tk.Button(payload_buttons_frame, text=text, command=command,
                           bg=self.colors['accent'], fg='black',
                           font=('Arial', 10, 'bold'))
            btn.grid(row=i//4, column=i%4, padx=5, pady=5, sticky='ew')
        
        for i in range(4):
            payload_buttons_frame.grid_columnconfigure(i, weight=1)
        
        # Log payload
        payload_log_frame = ttk.LabelFrame(main_payload_frame, text="üìã Log Payloads")
        payload_log_frame.pack(fill='both', expand=True)
        
        self.payload_log = scrolledtext.ScrolledText(payload_log_frame, 
                                                    bg=self.colors['secondary'],
                                                    fg=self.colors['fg'],
                                                    height=10)
        self.payload_log.pack(fill='both', expand=True, padx=10, pady=10)
         
    def setup_backdoor_tab(self):
        """Onglet cr√©ation de backdoors"""
        backdoor_frame = ttk.Frame(self.notebook)
        self.notebook.add(backdoor_frame, text="üö™ Backdoors")
        
        # Frame principale
        main_backdoor_frame = tk.Frame(backdoor_frame, bg=self.colors['bg'])
        main_backdoor_frame.pack(fill='both', expand=True, padx=20, pady=20)

        # Titre
        tk.Label(main_backdoor_frame, text="üö™ Cr√©ateur de Backdoors",
                 font=('Arial', 16, 'bold'),
                 bg=self.colors['bg'], fg=self.colors['accent']).pack(pady=(0, 20))
        
        # Configuration backdoor
        backdoor_config_frame = ttk.LabelFrame(main_backdoor_frame, text="‚öôÔ∏è Configuration")
        backdoor_config_frame.pack(fill='x', pady=(0, 20))
        
        # LHOST
        tk.Label(backdoor_config_frame, text="LHOST:", 
                bg=self.colors['bg'], fg=self.colors['fg']).pack(anchor='w', padx=10)
        
        self.backdoor_lhost_entry = tk.Entry(backdoor_config_frame, bg=self.colors['secondary'], fg=self.colors['fg'])
        self.backdoor_lhost_entry.pack(fill='x', padx=10, pady=5)
        self.backdoor_lhost_entry.insert(0, "192.168.1.100")
        
        # LPORT
        tk.Label(backdoor_config_frame, text="LPORT:", 
                bg=self.colors['bg'], fg=self.colors['fg']).pack(anchor='w', padx=10)
        
        self.backdoor_lport_entry = tk.Entry(backdoor_config_frame, bg=self.colors['secondary'], fg=self.colors['fg'])
        self.backdoor_lport_entry.pack(fill='x', padx=10, pady=5)
        self.backdoor_lport_entry.insert(0, "4444")
        
        # Boutons backdoor
        backdoor_buttons_frame = tk.Frame(main_backdoor_frame, bg=self.colors['bg'])
        backdoor_buttons_frame.pack(fill='x', pady=(0, 20))
        
        backdoor_buttons = [
            ("üñ•Ô∏è Windows Registry", lambda: self.create_backdoor("windows_registry")),
            ("üñ•Ô∏è Windows Service", lambda: self.create_backdoor("windows_service")),
            ("üêß Linux Cron", lambda: self.create_backdoor("linux_cron")),
            ("üêß Linux Service", lambda: self.create_backdoor("linux_service")),
            ("üñ•Ô∏è Windows Persistent", lambda: self.create_backdoor("windows_persistent")),
            ("üêß Linux Persistent", lambda: self.create_backdoor("linux_persistent")),
            ("üêß Linux Rootkit", lambda: self.create_backdoor("linux_rootkit"))
        ]
        
        for i, (text, command) in enumerate(backdoor_buttons):
            btn = tk.Button(backdoor_buttons_frame, text=text, command=command,
                           bg=self.colors['accent'], fg='black',
                           font=('Arial', 10, 'bold'))
            btn.grid(row=i//3, column=i%3, padx=5, pady=5, sticky='ew')
        
        for i in range(3):
            backdoor_buttons_frame.grid_columnconfigure(i, weight=1)
        
        # Log backdoor
        backdoor_log_frame = ttk.LabelFrame(main_backdoor_frame, text="üìã Log Backdoors")
        backdoor_log_frame.pack(fill='both', expand=True)
        
        self.backdoor_log = scrolledtext.ScrolledText(backdoor_log_frame, 
                                                     bg=self.colors['secondary'],
                                                     fg=self.colors['fg'],
                                                     height=10)
        self.backdoor_log.pack(fill='both', expand=True, padx=10, pady=10)
         
    # M√©thodes WiFi
    def scan_wifi_networks(self):
        """Scan des r√©seaux WiFi"""
        def scan_thread():
            try:
                self.wifi_log.insert(tk.END, "üì° Scan des r√©seaux WiFi...\n")
                self.wifi_log.see(tk.END)
                networks = self.wifi.scan_wifi_networks()
                
                if networks:
                    self.wifi_log.insert(tk.END, f"‚úÖ {len(networks)} r√©seaux trouv√©s:\n")
                    for network in networks:
                        self.wifi_log.insert(tk.END, f"  üì∂ {network.get('essid', 'Unknown')} - {network.get('encryption', 'Unknown')}\n")
                else:
                    self.wifi_log.insert(tk.END, "‚ùå Aucun r√©seau trouv√©\n")
                    
                self.wifi_log.see(tk.END)
                
            except Exception as e:
                self.wifi_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                self.wifi_log.see(tk.END)
                
        threading.Thread(target=scan_thread, daemon=True).start()
         
    def deauth_attack(self):
        """Attaque de d√©authentification"""
        target = tk.simpledialog.askstring("üéØ Cible", "Adresse MAC de la cible:")
        if target:
            def deauth_thread():
                try:
                    self.wifi_log.insert(tk.END, f"üíÄ Deauth attack sur {target}...\n")
                    self.wifi_log.see(tk.END)
                    
                    # V√©rifier les permissions selon l'OS
                    if self.os_type in ['linux', 'darwin']:
                        try:
                            result = subprocess.run(['whoami'], capture_output=True, text=True, timeout=5)
                            if result.stdout.strip() != 'root':
                                self.wifi_log.insert(tk.END, "‚ö†Ô∏è Permissions insuffisantes - certaines fonctionnalit√©s peuvent √©chouer\n")
                                self.wifi_log.insert(tk.END, "üí° Essayez d'ex√©cuter en tant qu'administrateur\n")
                        except Exception:
                            pass
                    elif self.os_type == 'windows':
                        try:
                            import ctypes
                            if not ctypes.windll.shell32.IsUserAnAdmin():
                                self.wifi_log.insert(tk.END, "‚ö†Ô∏è Ex√©cution en tant qu'utilisateur normal - fonctionnalit√©s limit√©es\n")
                        except Exception:
                            pass
                    
                    interface = self.wifi_interface_entry.get()
                    result = self.wifi.deauth_attack(target, interface)
                    
                    if result:
                        self.wifi_log.insert(tk.END, "‚úÖ Deauth attack lanc√©e\n")
                    else:
                        self.wifi_log.insert(tk.END, "‚ùå Erreur deauth attack\n")
                        
                    self.wifi_log.see(tk.END)
                    
                except Exception as e:
                    self.wifi_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                    if "Permission denied" in str(e) or "Operation not permitted" in str(e):
                        self.wifi_log.insert(tk.END, "üí° Essayez d'ex√©cuter en tant qu'administrateur\n")
                    elif "No such device" in str(e):
                        self.wifi_log.insert(tk.END, "üí° V√©rifiez que l'interface WiFi est correcte\n")
                    self.wifi_log.see(tk.END)
                    
            threading.Thread(target=deauth_thread, daemon=True).start()
             
    def capture_handshake(self):
        """Capture de handshake"""
        target = tk.simpledialog.askstring("üéØ Cible", "SSID de la cible:")
        if target:
            def capture_thread():
                try:
                    self.wifi_log.insert(tk.END, f"ü§ù Capture handshake: {target}...\n")
                    self.wifi_log.see(tk.END)
                    
                    interface = self.wifi_interface_entry.get()
                    result = self.wifi.capture_handshake(target, interface)
                    
                    if result:
                        self.wifi_log.insert(tk.END, f"‚úÖ Handshake captur√©: {result}\n")
                    else:
                        self.wifi_log.insert(tk.END, "‚ùå Erreur capture handshake\n")
                        
                    self.wifi_log.see(tk.END)
                    
                except Exception as e:
                    self.wifi_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                    self.wifi_log.see(tk.END)
                    
                threading.Thread(target=capture_thread, daemon=True).start()
             
    def crack_handshake(self):
        """Crack de handshake"""
        filename = filedialog.askopenfilename(title="üìÅ S√©lectionner fichier handshake")
        if filename:
            def crack_thread():
                try:
                    self.wifi_log.insert(tk.END, f"üîì Crack handshake: {filename}...\n")
                    self.wifi_log.see(tk.END)
                    
                    password = self.wifi.crack_wpa_handshake(filename)
                    
                    if password:
                        self.wifi_log.insert(tk.END, f"‚úÖ Mot de passe trouv√©: {password}\n")
                    else:
                        self.wifi_log.insert(tk.END, "‚ùå Mot de passe non trouv√©\n")
                        
                    self.wifi_log.see(tk.END)
                    
                except Exception as e:
                    self.wifi_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                    self.wifi_log.see(tk.END)
                    
            threading.Thread(target=crack_thread, daemon=True).start()
             
    def create_fake_ap(self):
        """Cr√©e un point d'acc√®s factice"""
        ssid = tk.simpledialog.askstring("üì° SSID", "Nom du point d'acc√®s:")
        if ssid:
            def fake_ap_thread():
                try:
                    self.wifi_log.insert(tk.END, f"üì° Cr√©ation AP factice: {ssid}...\n")
                    self.wifi_log.see(tk.END)
                    
                    interface = self.wifi_interface_entry.get()
                    result = self.wifi.create_fake_ap(ssid, interface)
                    
                    if result:
                        self.wifi_log.insert(tk.END, "‚úÖ AP factice cr√©√©\n")
                    else:
                        self.wifi_log.insert(tk.END, "‚ùå Erreur cr√©ation AP factice\n")
                        
                    self.wifi_log.see(tk.END)
                    
                except Exception as e:
                    self.wifi_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                    self.wifi_log.see(tk.END)
                    
            threading.Thread(target=fake_ap_thread, daemon=True).start()
            
    def evil_twin_attack(self):
        """Attaque Evil Twin"""
        target = tk.simpledialog.askstring("üéØ Cible", "SSID de la cible:")
        if target:
            def evil_twin_thread():
                try:
                    self.wifi_log.insert(tk.END, f"üëø Evil Twin attack: {target}...\n")
                    self.wifi_log.see(tk.END)
                    
                    interface = self.wifi_interface_entry.get()
                    result = self.wifi.evil_twin_attack(target, interface)
                    
                    if result:
                        self.wifi_log.insert(tk.END, "‚úÖ Evil Twin attack lanc√©e\n")
                    else:
                        self.wifi_log.insert(tk.END, "‚ùå Erreur Evil Twin attack\n")
                        
                    self.wifi_log.see(tk.END)
                    
                except Exception as e:
                    self.wifi_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                    self.wifi_log.see(tk.END)
                    
            threading.Thread(target=evil_twin_thread, daemon=True).start()
            
    def wps_attack(self):
        """Attaque WPS"""
        target = tk.simpledialog.askstring("üéØ Cible", "Adresse MAC de la cible:")
        if target:
            def wps_thread():
                try:
                    self.wifi_log.insert(tk.END, f"üîë WPS attack: {target}...\n")
                    self.wifi_log.see(tk.END)
                    
                    interface = self.wifi_interface_entry.get()
                    result = self.wifi.wps_attack(target, interface)
                    
                    if result:
                        self.wifi_log.insert(tk.END, "‚úÖ WPS attack lanc√©e\n")
                    else:
                        self.wifi_log.insert(tk.END, "‚ùå Erreur WPS attack\n")
                        
                    self.wifi_log.see(tk.END)
                    
                except Exception as e:
                    self.wifi_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                    self.wifi_log.see(tk.END)
                    
                threading.Thread(target=wps_thread, daemon=True).start()
         
    # M√©thodes Network
    def quick_network_scan(self):
        """Scan r√©seau rapide"""
        target = self.network_target_entry.get()
        if target:
            def scan_thread():
                try:
                    self.network_log.insert(tk.END, f"üîç Quick scan: {target}...\n")
                    self.network_log.see(tk.END)
                    
                    result = self.scanner.quick_scan(target)
                    
                    if result:
                        self.network_log.insert(tk.END, f"‚úÖ Scan termin√© - {len(result.get('hosts', []))} h√¥tes trouv√©s\n")
                    else:
                        self.network_log.insert(tk.END, "‚ùå Erreur scan\n")
                        
                    self.network_log.see(tk.END)
                    
                except Exception as e:
                    self.network_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                    self.network_log.see(tk.END)
                    
            threading.Thread(target=scan_thread, daemon=True).start()
             
    def full_network_scan(self):
        """Scan r√©seau complet"""
        target = self.network_target_entry.get()
        if target:
            def scan_thread():
                try:
                    self.network_log.insert(tk.END, f"üîç Full scan: {target}...\n")
                    self.network_log.see(tk.END)
                    
                    result = self.scanner.full_scan(target)
                    
                    if result:
                        self.network_log.insert(tk.END, f"‚úÖ Scan complet termin√©\n")
                    else:
                        self.network_log.insert(tk.END, "‚ùå Erreur scan complet\n")
                        
                    self.network_log.see(tk.END)
                    
                except Exception as e:
                    self.network_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                    self.network_log.see(tk.END)
                    
            threading.Thread(target=scan_thread, daemon=True).start()
            
    def masscan_scan(self):
        """Scan avec masscan"""
        target = self.network_target_entry.get()
        if target:
            def scan_thread():
                try:
                    self.network_log.insert(tk.END, f"‚ö° Masscan: {target}...\n")
                    self.network_log.see(tk.END)
                    
                    result = self.scanner.masscan_scan(target)
                    
                    if result:
                        self.network_log.insert(tk.END, "‚úÖ Masscan termin√©\n")
                    else:
                        self.network_log.insert(tk.END, "‚ùå Erreur masscan\n")
                        
                    self.network_log.see(tk.END)
                    
                except Exception as e:
                    self.network_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                    self.network_log.see(tk.END)
                    
            threading.Thread(target=scan_thread, daemon=True).start()
            
    def service_enumeration(self):
        """√ânum√©ration des services"""
        target = tk.simpledialog.askstring("üéØ Cible", "Cible (IP:port):")
        if target:
            def enum_thread():
                try:
                    self.network_log.insert(tk.END, f"üîç Service enum: {target}...\n")
                    self.network_log.see(tk.END)
                    
                    host, port = target.split(':')
                    result = self.scanner.service_enumeration(host, int(port))
                    
                    if result:
                        self.network_log.insert(tk.END, "‚úÖ Service enum termin√©\n")
                    else:
                        self.network_log.insert(tk.END, "‚ùå Erreur service enum\n")
                        
                    self.network_log.see(tk.END)
                    
                except Exception as e:
                    self.network_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                    self.network_log.see(tk.END)
                    
                threading.Thread(target=enum_thread, daemon=True).start()
             
    def web_enumeration(self):
        """√ânum√©ration web"""
        target = self.network_target_entry.get()
        if target:
            def enum_thread():
                try:
                    self.network_log.insert(tk.END, f"üåê Web enum: {target}...\n")
                    self.network_log.see(tk.END)
                    
                    result = self.scanner.web_enumeration(target)
                    
                    if result:
                        self.network_log.insert(tk.END, "‚úÖ Web enum termin√©\n")
                    else:
                        self.network_log.insert(tk.END, "‚ùå Erreur web enum\n")
                        
                    self.network_log.see(tk.END)
                    
                except Exception as e:
                    self.network_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                    self.network_log.see(tk.END)
                    
            threading.Thread(target=enum_thread, daemon=True).start()
             
    def dns_enumeration(self):
         """√ânum√©ration DNS"""
         domain = tk.simpledialog.askstring("üåê Domaine", "Domaine √† √©num√©rer:")
         if domain:
             def enum_thread():
                 try:
                     self.network_log.insert(tk.END, f"üîç DNS enum: {domain}...\n")
                     self.network_log.see(tk.END)
                     
                     result = self.scanner.dns_enumeration(domain)
                     
                     if result:
                         self.network_log.insert(tk.END, "‚úÖ DNS enum termin√©\n")
                     else:
                         self.network_log.insert(tk.END, "‚ùå Erreur DNS enum\n")
                         
                     self.network_log.see(tk.END)
                     
                 except Exception as e:
                     self.network_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                     self.network_log.see(tk.END)
                     
             threading.Thread(target=enum_thread, daemon=True).start()
             
    def subdomain_enumeration(self):
         """√ânum√©ration de sous-domaines"""
         domain = tk.simpledialog.askstring("üåê Domaine", "Domaine pour sous-domaines:")
         if domain:
             def enum_thread():
                 try:
                     self.network_log.insert(tk.END, f"üîç Subdomain enum: {domain}...\n")
                     self.network_log.see(tk.END)
                     
                     result = self.scanner.subdomain_enumeration(domain)
                     
                     if result:
                         self.network_log.insert(tk.END, "‚úÖ Subdomain enum termin√©\n")
                     else:
                         self.network_log.insert(tk.END, "‚ùå Erreur subdomain enum\n")
                         
                     self.network_log.see(tk.END)
                     
                 except Exception as e:
                     self.network_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                     self.network_log.see(tk.END)
                     
             threading.Thread(target=enum_thread, daemon=True).start()
             
    def vulnerability_scan(self):
         """Scan de vuln√©rabilit√©s"""
         target = self.network_target_entry.get()
         if target:
             def scan_thread():
                 try:
                     self.network_log.insert(tk.END, f"üîç Vuln scan: {target}...\n")
                     self.network_log.see(tk.END)
                     
                     result = self.scanner.vulnerability_scan(target)
                     
                     if result:
                         self.network_log.insert(tk.END, "‚úÖ Vuln scan termin√©\n")
                     else:
                         self.network_log.insert(tk.END, "‚ùå Erreur vuln scan\n")
                         
                     self.network_log.see(tk.END)
                     
                 except Exception as e:
                     self.network_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                     self.network_log.see(tk.END)
                     
             threading.Thread(target=scan_thread, daemon=True).start()
         
    # M√©thodes Payload
    def generate_payload(self, payload_type):
        """G√©n√®re un payload"""
        lhost = self.lhost_entry.get()
        lport = self.lport_entry.get()
         
        if not lhost or not lport:
            messagebox.showerror("‚ùå Erreur", "Veuillez remplir LHOST et LPORT")
            return
            
        def generate_thread():
            try:
                 self.payload_log.insert(tk.END, f"üí£ G√©n√©ration payload {payload_type}...\n")
                 self.payload_log.see(tk.END)
                 
                 if payload_type == "windows_reverse":
                     result = self.payload.generate_reverse_shell("windows", lhost, int(lport))
                 elif payload_type == "linux_reverse":
                     result = self.payload.generate_reverse_shell("linux", lhost, int(lport))
                 elif payload_type == "android_reverse":
                     result = self.payload.generate_reverse_shell("android", lhost, int(lport))
                 elif payload_type == "windows_bind":
                     result = self.payload.generate_bind_shell("windows", int(lport))
                 elif payload_type == "linux_bind":
                     result = self.payload.generate_bind_shell("linux", int(lport))
                 elif payload_type == "php_webshell":
                     result = self.payload.generate_php_webshell()
                 elif payload_type == "powershell":
                     result = self.payload.generate_powershell_payload(lhost, int(lport))
                 elif payload_type == "python":
                     result = self.payload.generate_python_payload(lhost, int(lport))
                 else:
                     self.payload_log.insert(tk.END, "‚ùå Type de payload non support√©\n")
                     return
                     
                 if result:
                     self.payload_log.insert(tk.END, f"‚úÖ Payload g√©n√©r√©: {result}\n")
                 else:
                     self.payload_log.insert(tk.END, "‚ùå Erreur g√©n√©ration payload\n")
                     
                 self.payload_log.see(tk.END)
                 
            except Exception as e:
                 self.payload_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                 self.payload_log.see(tk.END)
                 
            threading.Thread(target=generate_thread, daemon=True).start()
         
    # M√©thodes Backdoor
    def create_backdoor(self, backdoor_type):
        """Cr√©e un backdoor"""
        lhost = self.backdoor_lhost_entry.get()
        lport = self.backdoor_lport_entry.get()
        
        if not lhost or not lport:
            messagebox.showerror("‚ùå Erreur", "Veuillez remplir LHOST et LPORT")
            return
             
        def create_thread():
             try:
                 self.backdoor_log.insert(tk.END, f"üö™ Cr√©ation backdoor {backdoor_type}...\n")
                 self.backdoor_log.see(tk.END)
                 
                 if backdoor_type == "windows_registry":
                     payload_file = "payload.exe"  # √Ä am√©liorer
                     result = self.backdoor.create_windows_registry_backdoor(lhost, int(lport), payload_file)
                 elif backdoor_type == "windows_service":
                     service_name = "SystemUpdate"
                     result = self.backdoor.create_windows_service_backdoor(service_name, "payload.exe")
                 elif backdoor_type == "linux_cron":
                     result = self.backdoor.create_linux_cron_backdoor(lhost, int(lport))
                 elif backdoor_type == "linux_service":
                     service_name = "systemd"
                     result = self.backdoor.create_linux_service_backdoor(service_name, lhost, int(lport))
                 elif backdoor_type == "windows_persistent":
                     result = self.backdoor.create_persistent_backdoor("windows", lhost, int(lport))
                 elif backdoor_type == "linux_persistent":
                     result = self.backdoor.create_persistent_backdoor("linux", lhost, int(lport))
                 elif backdoor_type == "linux_rootkit":
                     result = self.backdoor.create_rootkit_backdoor("linux")
                 else:
                     self.backdoor_log.insert(tk.END, "‚ùå Type de backdoor non support√©\n")
                     return
                     
                 if result:
                     self.backdoor_log.insert(tk.END, f"‚úÖ Backdoor cr√©√©: {result}\n")
                 else:
                     self.backdoor_log.insert(tk.END, "‚ùå Erreur cr√©ation backdoor\n")
                     
                 self.backdoor_log.see(tk.END)
                 
             except Exception as e:
                 self.backdoor_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                 self.backdoor_log.see(tk.END)
                 
                 threading.Thread(target=create_thread, daemon=True).start()
         
    def setup_clone_tab(self):
        """Onglet clonage de sites"""
        clone_frame = ttk.Frame(self.notebook)
        self.notebook.add(clone_frame, text="üåê Cloner Site")
        
        # Frame principale
        main_clone_frame = tk.Frame(clone_frame, bg=self.colors['bg'])
        main_clone_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Titre
        tk.Label(main_clone_frame, text="üåê Clonage de Sites Web",
                font=('Arial', 16, 'bold'),
                bg=self.colors['bg'], fg=self.colors['accent']).pack(pady=(0, 20))
        
        # URL √† cloner
        url_frame = ttk.LabelFrame(main_clone_frame, text="üéØ URL Cible")
        url_frame.pack(fill='x', pady=(0, 20))
        
        self.clone_url_entry = tk.Entry(url_frame, bg=self.colors['secondary'], fg=self.colors['fg'],
                                       font=('Arial', 12))
        self.clone_url_entry.pack(fill='x', padx=10, pady=10)
        self.clone_url_entry.insert(0, "https://example.com")
        
        # Boutons clonage
        clone_buttons_frame = tk.Frame(main_clone_frame, bg=self.colors['bg'])
        clone_buttons_frame.pack(fill='x', pady=(0, 20))
        
        tk.Button(clone_buttons_frame, text="üåê Cloner Site",
                 command=self.clone_site,
                 bg=self.colors['accent'], fg='black',
                 font=('Arial', 12, 'bold')).pack(side='left', padx=5)
        
        tk.Button(clone_buttons_frame, text="üé® Template Personnalis√©",
                 command=self.create_custom_template,
                 bg=self.colors['secondary'], fg=self.colors['fg'],
                 font=('Arial', 12)).pack(side='left', padx=5)
        
        # Log de clonage
        log_frame = ttk.LabelFrame(main_clone_frame, text="üìã Log de Clonage")
        log_frame.pack(fill='both', expand=True)
        
        self.clone_log = scrolledtext.ScrolledText(log_frame, 
                                                  bg=self.colors['secondary'],
                                                  fg=self.colors['fg'],
                                                  height=10)
        self.clone_log.pack(fill='both', expand=True, padx=10, pady=10)
        
    def setup_attacks_tab(self):
        """Onglet attaques avanc√©es"""
        attacks_frame = ttk.Frame(self.notebook)
        self.notebook.add(attacks_frame, text="‚ö° Attaques")
        
        # Frame principale
        main_attacks_frame = tk.Frame(attacks_frame, bg=self.colors['bg'])
        main_attacks_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Titre
        tk.Label(main_attacks_frame, text="‚ö° Attaques Avanc√©es",
                font=('Arial', 16, 'bold'),
                bg=self.colors['bg'], fg=self.colors['accent']).pack(pady=(0, 20))
        
        # Configuration d'attaque
        attack_config_frame = ttk.LabelFrame(main_attacks_frame, text="üéØ Configuration")
        attack_config_frame.pack(fill='x', pady=(0, 20))
        
        # Type d'attaque
        tk.Label(attack_config_frame, text="Type d'attaque:", 
                bg=self.colors['bg'], fg=self.colors['fg']).pack(anchor='w', padx=10)
        
        self.attack_type_var = tk.StringVar(value="scan")
        attack_types = [
            ("üîç Scan R√©seau", "scan"),
            ("üîê SSH Brute Force", "ssh"),
            ("üåê Web Enumeration", "web"),
            ("üíâ SQL Injection", "sql"),
            ("üéØ XSS Test", "xss")
        ]
        
        for text, value in attack_types:
            tk.Radiobutton(attack_config_frame, text=text, variable=self.attack_type_var,
                          value=value, bg=self.colors['bg'], fg=self.colors['fg']).pack(anchor='w', padx=20)
        
        # Cible
        tk.Label(attack_config_frame, text="Cible:", 
                bg=self.colors['bg'], fg=self.colors['fg']).pack(anchor='w', padx=10, pady=(10, 0))
        
        self.target_entry = tk.Entry(attack_config_frame, bg=self.colors['secondary'], fg=self.colors['fg'])
        self.target_entry.pack(fill='x', padx=10, pady=5)
        self.target_entry.insert(0, "192.168.1.1")
        
        # Boutons d'attaque
        attack_buttons_frame = tk.Frame(main_attacks_frame, bg=self.colors['bg'])
        attack_buttons_frame.pack(fill='x', pady=(0, 20))
        
        tk.Button(attack_buttons_frame, text="‚ö° Lancer Attaque",
                 command=self.launch_attack,
                 bg=self.colors['danger'], fg='white',
                 font=('Arial', 12, 'bold')).pack(side='left', padx=5)
        
        tk.Button(attack_buttons_frame, text="üìä Voir R√©sultats",
                 command=self.show_attack_results,
                 bg=self.colors['secondary'], fg=self.colors['fg'],
                 font=('Arial', 12)).pack(side='left', padx=5)
        
        # Log d'attaques
        attack_log_frame = ttk.LabelFrame(main_attacks_frame, text="üìã Log d'Attaques")
        attack_log_frame.pack(fill='both', expand=True)
        
        self.attack_log = scrolledtext.ScrolledText(attack_log_frame, 
                                                   bg=self.colors['secondary'],
                                                   fg=self.colors['fg'],
                                                   height=10)
        self.attack_log.pack(fill='both', expand=True, padx=10, pady=10)
        
    def setup_tunnels_tab(self):
        """Onglet tunnels"""
        tunnels_frame = ttk.Frame(self.notebook)
        self.notebook.add(tunnels_frame, text="üöá Tunnels")
        
        # Frame principale
        main_tunnels_frame = tk.Frame(tunnels_frame, bg=self.colors['bg'])
        main_tunnels_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Titre
        tk.Label(main_tunnels_frame, text="üöá Gestionnaire de Tunnels",
                font=('Arial', 16, 'bold'),
                bg=self.colors['bg'], fg=self.colors['accent']).pack(pady=(0, 20))
        
        # Boutons tunnels
        tunnels_buttons_frame = tk.Frame(main_tunnels_frame, bg=self.colors['bg'])
        tunnels_buttons_frame.pack(fill='x', pady=(0, 20))
        
        tunnel_buttons = [
            ("üöá Ngrok", self.start_ngrok),
            ("‚òÅÔ∏è Cloudflare", self.start_cloudflare),
            ("üåê LocalTunnel", self.start_localtunnel),
            ("üîÑ Proxy", self.start_proxy)
        ]
        
        for i, (text, command) in enumerate(tunnel_buttons):
            btn = tk.Button(tunnels_buttons_frame, text=text, command=command,
                           bg=self.colors['accent'], fg='black',
                           font=('Arial', 12, 'bold'))
            btn.grid(row=i//2, column=i%2, padx=10, pady=10, sticky='ew')
        
        tunnels_buttons_frame.grid_columnconfigure(0, weight=1)
        tunnels_buttons_frame.grid_columnconfigure(1, weight=1)
        
        # Status des tunnels
        tunnel_status_frame = ttk.LabelFrame(main_tunnels_frame, text="üìä Status des Tunnels")
        tunnel_status_frame.pack(fill='x', pady=(0, 20))
        
        self.tunnel_status_text = scrolledtext.ScrolledText(tunnel_status_frame, 
                                                           bg=self.colors['secondary'],
                                                           fg=self.colors['fg'],
                                                           height=8)
        self.tunnel_status_text.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Boutons de contr√¥le
        control_buttons_frame = tk.Frame(main_tunnels_frame, bg=self.colors['bg'])
        control_buttons_frame.pack(fill='x')
        
        tk.Button(control_buttons_frame, text="üîÑ Actualiser Status",
                 command=self.refresh_tunnel_status,
                 bg=self.colors['secondary'], fg=self.colors['fg']).pack(side='left', padx=5)
        
        tk.Button(control_buttons_frame, text="‚èπÔ∏è Arr√™ter Tous",
                 command=self.stop_all_tunnels,
                 bg=self.colors['danger'], fg='white').pack(side='left', padx=5)
        
    def setup_stats_tab(self):
        """Onglet statistiques"""
        stats_frame = ttk.Frame(self.notebook)
        self.notebook.add(stats_frame, text="üìä Stats")
        
        # Frame principale
        main_stats_frame = tk.Frame(stats_frame, bg=self.colors['bg'])
        main_stats_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Titre
        tk.Label(main_stats_frame, text="üìä Statistiques en Temps R√©el",
                font=('Arial', 16, 'bold'),
                bg=self.colors['bg'], fg=self.colors['accent']).pack(pady=(0, 20))
        
        # Stats principales
        stats_main_frame = tk.Frame(main_stats_frame, bg=self.colors['bg'])
        stats_main_frame.pack(fill='x', pady=(0, 20))
        
        # Labels de stats
        self.stats_labels = {}
        stats_data = [
            ("üéØ Victimes Totales", "total_victims"),
            ("‚úÖ Attaques R√©ussies", "successful_attacks"),
            ("üìù Credentials Captur√©s", "captured_credentials"),
            ("üåç Pays Diff√©rents", "countries")
        ]
        
        for i, (label, key) in enumerate(stats_data):
            frame = tk.Frame(stats_main_frame, bg=self.colors['secondary'])
            frame.grid(row=i//2, column=i%2, padx=10, pady=10, sticky='ew')
            
            tk.Label(frame, text=label, bg=self.colors['secondary'], fg=self.colors['fg'],
                    font=('Arial', 12, 'bold')).pack(pady=5)
            
            self.stats_labels[key] = tk.Label(frame, text="0", 
                                             bg=self.colors['secondary'], fg=self.colors['accent'],
                                             font=('Arial', 16, 'bold'))
            self.stats_labels[key].pack(pady=5)
        
        stats_main_frame.grid_columnconfigure(0, weight=1)
        stats_main_frame.grid_columnconfigure(1, weight=1)
        
        # Credentials r√©cents
        creds_frame = ttk.LabelFrame(main_stats_frame, text="üìã Credentials R√©cents")
        creds_frame.pack(fill='both', expand=True)
        
        self.creds_text = scrolledtext.ScrolledText(creds_frame, 
                                                   bg=self.colors['secondary'],
                                                   fg=self.colors['fg'],
                                                   height=10)
        self.creds_text.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Boutons export
        export_buttons_frame = tk.Frame(main_stats_frame, bg=self.colors['bg'])
        export_buttons_frame.pack(fill='x', pady=10)
        
        tk.Button(export_buttons_frame, text="üì§ Exporter Credentials",
                 command=self.export_credentials,
                 bg=self.colors['accent'], fg='black').pack(side='left', padx=5)
        
        tk.Button(export_buttons_frame, text="üìä Exporter Stats",
                 command=self.export_stats,
                 bg=self.colors['secondary'], fg=self.colors['fg']).pack(side='left', padx=5)
        
    def setup_settings_tab(self):
        """Onglet param√®tres"""
        settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(settings_frame, text="‚öôÔ∏è Settings")
        
        # Frame principale
        main_settings_frame = tk.Frame(settings_frame, bg=self.colors['bg'])
        main_settings_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Titre
        tk.Label(main_settings_frame, text="‚öôÔ∏è Configuration",
                font=('Arial', 16, 'bold'),
                bg=self.colors['bg'], fg=self.colors['accent']).pack(pady=(0, 20))
        
        # Param√®tres g√©n√©raux
        general_frame = ttk.LabelFrame(main_settings_frame, text="üîß Param√®tres G√©n√©raux")
        general_frame.pack(fill='x', pady=(0, 20))
        
        # Auto-d√©marrage
        self.auto_start_var = tk.BooleanVar()
        tk.Checkbutton(general_frame, text="üöÄ Auto-d√©marrage du serveur",
                      variable=self.auto_start_var,
                      bg=self.colors['bg'], fg=self.colors['fg']).pack(anchor='w', padx=10, pady=5)
        
        # Auto-ouverture navigateur
        self.auto_browser_var = tk.BooleanVar()
        tk.Checkbutton(general_frame, text="üåê Auto-ouverture navigateur",
                      variable=self.auto_browser_var,
                      bg=self.colors['bg'], fg=self.colors['fg']).pack(anchor='w', padx=10, pady=5)
        
        # Sauvegarder automatiquement
        self.auto_save_var = tk.BooleanVar(value=True)
        tk.Checkbutton(general_frame, text="üíæ Sauvegarde automatique",
                      variable=self.auto_save_var,
                      bg=self.colors['bg'], fg=self.colors['fg']).pack(anchor='w', padx=10, pady=5)
        
        # Boutons d'action
        action_buttons_frame = tk.Frame(main_settings_frame, bg=self.colors['bg'])
        action_buttons_frame.pack(fill='x', pady=20)
        
        tk.Button(action_buttons_frame, text="üíæ Sauvegarder Config",
                 command=self.save_config,
                 bg=self.colors['accent'], fg='black').pack(side='left', padx=5)
        
        tk.Button(action_buttons_frame, text="üîÑ R√©initialiser",
                 command=self.reset_config,
                 bg=self.colors['warning'], fg='black').pack(side='left', padx=5)
        
        tk.Button(action_buttons_frame, text="üìÅ Ouvrir Dossier Logs",
                 command=self.open_logs_folder,
                 bg=self.colors['secondary'], fg=self.colors['fg']).pack(side='left', padx=5)
        
    def setup_exploit_tab(self):
        """Onglet exploits avanc√©s"""
        exploit_frame = ttk.Frame(self.notebook)
        self.notebook.add(exploit_frame, text="üí• Exploits")
        
        # Frame principale
        main_frame = ttk.Frame(exploit_frame)
        main_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # Section exploits personnalis√©s
        exploit_section = ttk.LabelFrame(main_frame, text="Exploits Personnalis√©s")
        exploit_section.pack(fill=X, pady=5)
        
        ttk.Label(exploit_section, text="OS Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.exploit_os_var = tk.StringVar(value="linux")
        exploit_os_combo = ttk.Combobox(exploit_section, textvariable=self.exploit_os_var, 
                                       values=["linux", "windows", "android"])
        exploit_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(exploit_section, text="Type:").grid(row=1, column=0, padx=5, pady=5)
        self.exploit_type_var = tk.StringVar(value="buffer_overflow")
        exploit_type_combo = ttk.Combobox(exploit_section, textvariable=self.exploit_type_var,
                                         values=["buffer_overflow", "sql_injection", "xss", "rce"])
        exploit_type_combo.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Label(exploit_section, text="Payload:").grid(row=2, column=0, padx=5, pady=5)
        self.exploit_payload_var = tk.StringVar(value="reverse_shell")
        exploit_payload_entry = ttk.Entry(exploit_section, textvariable=self.exploit_payload_var, width=30)
        exploit_payload_entry.grid(row=2, column=1, padx=5, pady=5)
        
        ttk.Button(exploit_section, text="Cr√©er Exploit", 
                  command=self.create_custom_exploit).grid(row=3, column=0, columnspan=2, pady=10)
        
        # Section escalade de privil√®ges
        escalation_section = ttk.LabelFrame(main_frame, text="Escalade de Privil√®ges")
        escalation_section.pack(fill=X, pady=5)
        
        ttk.Label(escalation_section, text="OS:").grid(row=0, column=0, padx=5, pady=5)
        self.escalation_os_var = tk.StringVar(value="linux")
        escalation_os_combo = ttk.Combobox(escalation_section, textvariable=self.escalation_os_var,
                                          values=["linux", "windows"])
        escalation_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(escalation_section, text="M√©thode:").grid(row=1, column=0, padx=5, pady=5)
        self.escalation_method_var = tk.StringVar(value="suid_binaries")
        escalation_method_combo = ttk.Combobox(escalation_section, textvariable=self.escalation_method_var,
                                             values=["suid_binaries", "sudo_abuse", "capabilities", "cron_jobs"])
        escalation_method_combo.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Button(escalation_section, text="Cr√©er Script Escalade", 
                  command=self.create_privilege_escalation).grid(row=2, column=0, columnspan=2, pady=10)
        
        # Section virus polymorphe
        virus_section = ttk.LabelFrame(main_frame, text="Virus Polymorphe")
        virus_section.pack(fill=X, pady=5)
        
        ttk.Label(virus_section, text="OS Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.virus_os_var = tk.StringVar(value="linux")
        virus_os_combo = ttk.Combobox(virus_section, textvariable=self.virus_os_var,
                                     values=["linux", "windows"])
        virus_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(virus_section, text="Cr√©er Virus Polymorphe", 
                  command=self.create_polymorphic_virus).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Log des exploits
        log_frame = ttk.LabelFrame(main_frame, text="Log des Exploits")
        log_frame.pack(fill=BOTH, expand=True, pady=5)
        
        self.exploit_log = scrolledtext.ScrolledText(log_frame, height=10)
        self.exploit_log.pack(fill=BOTH, expand=True, padx=5, pady=5)

    def setup_social_tab(self):
        """Onglet ing√©nierie sociale"""
        social_frame = ttk.Frame(self.notebook)
        self.notebook.add(social_frame, text="üß† Social Engineering")
        
        # Frame principale
        main_frame = ttk.Frame(social_frame)
        main_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # Section campagnes phishing
        campaign_section = ttk.LabelFrame(main_frame, text="Campagnes Phishing")
        campaign_section.pack(fill=X, pady=5)
        
        ttk.Label(campaign_section, text="Type:").grid(row=0, column=0, padx=5, pady=5)
        self.campaign_type_var = tk.StringVar(value="bank")
        campaign_type_combo = ttk.Combobox(campaign_section, textvariable=self.campaign_type_var,
                                          values=["bank", "tech_support", "social_media"])
        campaign_type_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(campaign_section, text="Pr√©texte:").grid(row=1, column=0, padx=5, pady=5)
        self.campaign_pretext_var = tk.StringVar(value="Suspension de compte bancaire")
        campaign_pretext_entry = ttk.Entry(campaign_section, textvariable=self.campaign_pretext_var, width=40)
        campaign_pretext_entry.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Button(campaign_section, text="Cr√©er Campagne", 
                  command=self.create_phishing_campaign).grid(row=2, column=0, columnspan=2, pady=10)
        
        # Section pr√©textes
        pretext_section = ttk.LabelFrame(main_frame, text="Sc√©narios de Pr√©texte")
        pretext_section.pack(fill=X, pady=5)
        
        ttk.Label(pretext_section, text="Type:").grid(row=0, column=0, padx=5, pady=5)
        self.pretext_type_var = tk.StringVar(value="bank_official")
        pretext_type_combo = ttk.Combobox(pretext_section, textvariable=self.pretext_type_var,
                                         values=["bank_official", "tech_support", "government_official", "colleague"])
        pretext_type_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(pretext_section, text="Cr√©er Sc√©nario", 
                  command=self.create_pretext_scenario).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Section vishing
        vishing_section = ttk.LabelFrame(main_frame, text="Scripts Vishing")
        vishing_section.pack(fill=X, pady=5)
        
        ttk.Label(vishing_section, text="Type:").grid(row=0, column=0, padx=5, pady=5)
        self.vishing_type_var = tk.StringVar(value="bank_security")
        vishing_type_combo = ttk.Combobox(vishing_section, textvariable=self.vishing_type_var,
                                         values=["bank_security", "tech_support"])
        vishing_type_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(vishing_section, text="Cr√©er Script Vishing", 
                  command=self.create_vishing_script).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Log social engineering
        log_frame = ttk.LabelFrame(main_frame, text="Log Social Engineering")
        log_frame.pack(fill=BOTH, expand=True, pady=5)
        
        self.social_log = scrolledtext.ScrolledText(log_frame, height=10)
        self.social_log.pack(fill=BOTH, expand=True, padx=5, pady=5)

    def setup_stealth_tab(self):
        """Onglet op√©rations furtives"""
        stealth_frame = ttk.Frame(self.notebook)
        self.notebook.add(stealth_frame, text="üëª Stealth")
        
        # Frame principale
        main_frame = ttk.Frame(stealth_frame)
        main_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # Section payloads furtifs
        payload_section = ttk.LabelFrame(main_frame, text="Payloads Furtifs")
        payload_section.pack(fill=X, pady=5)
        
        ttk.Label(payload_section, text="OS Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.stealth_os_var = tk.StringVar(value="linux")
        stealth_os_combo = ttk.Combobox(payload_section, textvariable=self.stealth_os_var,
                                       values=["linux", "windows"])
        stealth_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(payload_section, text="Niveau √âvasion:").grid(row=1, column=0, padx=5, pady=5)
        self.stealth_level_var = tk.StringVar(value="medium")
        stealth_level_combo = ttk.Combobox(payload_section, textvariable=self.stealth_level_var,
                                          values=["low", "medium", "high"])
        stealth_level_combo.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Button(payload_section, text="Cr√©er Payload Furtif", 
                  command=self.create_stealth_payload).grid(row=2, column=0, columnspan=2, pady=10)
        
        # Section rootkits
        rootkit_section = ttk.LabelFrame(main_frame, text="Rootkits")
        rootkit_section.pack(fill=X, pady=5)
        
        ttk.Label(rootkit_section, text="OS Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.rootkit_os_var = tk.StringVar(value="linux")
        rootkit_os_combo = ttk.Combobox(rootkit_section, textvariable=self.rootkit_os_var,
                                       values=["linux", "windows"])
        rootkit_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(rootkit_section, text="Cr√©er Rootkit", 
                  command=self.create_rootkit).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Section anti-forensics
        anti_forensics_section = ttk.LabelFrame(main_frame, text="Anti-Forensics")
        anti_forensics_section.pack(fill=X, pady=5)
        
        ttk.Button(anti_forensics_section, text="Cr√©er Outil Anti-Forensics", 
                  command=self.create_anti_forensics_tool).grid(row=0, column=0, columnspan=2, pady=10)
        
        # Log stealth
        log_frame = ttk.LabelFrame(main_frame, text="Log Stealth")
        log_frame.pack(fill=BOTH, expand=True, pady=5)
        
        self.stealth_log = scrolledtext.ScrolledText(log_frame, height=10)
        self.stealth_log.pack(fill=BOTH, expand=True, padx=5, pady=5)

    def setup_malware_tab(self):
        """Onglet malware avanc√©"""
        malware_frame = ttk.Frame(self.notebook)
        self.notebook.add(malware_frame, text="ü¶† Malware")
        
        # Frame principale
        main_frame = ttk.Frame(malware_frame)
        main_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # Section keylogger
        keylogger_section = ttk.LabelFrame(main_frame, text="Keylogger")
        keylogger_section.pack(fill=X, pady=5)
        
        ttk.Label(keylogger_section, text="OS Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.keylogger_os_var = tk.StringVar(value="linux")
        keylogger_os_combo = ttk.Combobox(keylogger_section, textvariable=self.keylogger_os_var,
                                         values=["linux", "windows"])
        keylogger_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(keylogger_section, text="Cr√©er Keylogger", 
                  command=self.create_keylogger).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Section ransomware
        ransomware_section = ttk.LabelFrame(main_frame, text="Ransomware")
        ransomware_section.pack(fill=X, pady=5)
        
        ttk.Label(ransomware_section, text="OS Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.ransomware_os_var = tk.StringVar(value="linux")
        ransomware_os_combo = ttk.Combobox(ransomware_section, textvariable=self.ransomware_os_var,
                                          values=["linux", "windows"])
        ransomware_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(ransomware_section, text="Cr√©er Ransomware", 
                  command=self.create_ransomware).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Section cryptominer
        miner_section = ttk.LabelFrame(main_frame, text="Cryptominer")
        miner_section.pack(fill=X, pady=5)
        
        ttk.Label(miner_section, text="OS Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.miner_os_var = tk.StringVar(value="linux")
        miner_os_combo = ttk.Combobox(miner_section, textvariable=self.miner_os_var,
                                     values=["linux", "windows"])
        miner_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(miner_section, text="Cr√©er Cryptominer", 
                  command=self.create_cryptominer).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Log malware
        log_frame = ttk.LabelFrame(main_frame, text="Log Malware")
        log_frame.pack(fill=BOTH, expand=True, pady=5)
        
        self.malware_log = scrolledtext.ScrolledText(log_frame, height=10)
        self.malware_log.pack(fill=BOTH, expand=True, padx=5, pady=5)

    def setup_zero_day_tab(self):
        """Onglet exploits zero-day"""
        zero_day_frame = ttk.Frame(self.notebook)
        self.notebook.add(zero_day_frame, text="üî• Zero-Day")
        
        # Frame principale
        main_frame = ttk.Frame(zero_day_frame)
        main_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # Section buffer overflow
        bof_section = ttk.LabelFrame(main_frame, text="Buffer Overflow")
        bof_section.pack(fill=X, pady=5)
        
        ttk.Label(bof_section, text="OS Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.bof_os_var = tk.StringVar(value="linux")
        bof_os_combo = ttk.Combobox(bof_section, textvariable=self.bof_os_var,
                                    values=["linux", "windows"])
        bof_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(bof_section, text="Service:").grid(row=1, column=0, padx=5, pady=5)
        self.bof_service_var = tk.StringVar(value="http")
        bof_service_combo = ttk.Combobox(bof_section, textvariable=self.bof_service_var,
                                        values=["http", "ftp", "smtp", "ssh"])
        bof_service_combo.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Button(bof_section, text="Cr√©er Exploit Buffer Overflow", 
                  command=self.create_buffer_overflow_exploit).grid(row=2, column=0, columnspan=2, pady=10)
        
        # Section heap spraying
        heap_section = ttk.LabelFrame(main_frame, text="Heap Spraying")
        heap_section.pack(fill=X, pady=5)
        
        ttk.Label(heap_section, text="OS Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.heap_os_var = tk.StringVar(value="linux")
        heap_os_combo = ttk.Combobox(heap_section, textvariable=self.heap_os_var,
                                    values=["linux", "windows"])
        heap_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(heap_section, text="Cr√©er Exploit Heap Spraying", 
                  command=self.create_heap_spray_exploit).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Section ROP chain
        rop_section = ttk.LabelFrame(main_frame, text="ROP Chain")
        rop_section.pack(fill=X, pady=5)
        
        ttk.Label(rop_section, text="OS Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.rop_os_var = tk.StringVar(value="linux")
        rop_os_combo = ttk.Combobox(rop_section, textvariable=self.rop_os_var,
                                   values=["linux", "windows"])
        rop_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(rop_section, text="Architecture:").grid(row=1, column=0, padx=5, pady=5)
        self.rop_arch_var = tk.StringVar(value="x86")
        rop_arch_combo = ttk.Combobox(rop_section, textvariable=self.rop_arch_var,
                                     values=["x86", "x64"])
        rop_arch_combo.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Button(rop_section, text="Cr√©er Exploit ROP Chain", 
                  command=self.create_rop_chain_exploit).grid(row=2, column=0, columnspan=2, pady=10)
        
        # Section format string
        format_section = ttk.LabelFrame(main_frame, text="Format String")
        format_section.pack(fill=X, pady=5)
        
        ttk.Label(format_section, text="OS Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.format_os_var = tk.StringVar(value="linux")
        format_os_combo = ttk.Combobox(format_section, textvariable=self.format_os_var,
                                      values=["linux", "windows"])
        format_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(format_section, text="Cr√©er Exploit Format String", 
                  command=self.create_format_string_exploit).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Log zero-day
        log_frame = ttk.LabelFrame(main_frame, text="Log Zero-Day")
        log_frame.pack(fill=BOTH, expand=True, pady=5)
        
        self.zero_day_log = scrolledtext.ScrolledText(log_frame, height=10)
        self.zero_day_log.pack(fill=BOTH, expand=True, padx=5, pady=5)

    def setup_persistence_tab(self):
        """Onglet persistance avanc√©e"""
        persistence_frame = ttk.Frame(self.notebook)
        self.notebook.add(persistence_frame, text="üï∑Ô∏è Persistance")
        
        # Frame principale
        main_frame = ttk.Frame(persistence_frame)
        main_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # Section bootkits
        bootkit_section = ttk.LabelFrame(main_frame, text="Bootkits")
        bootkit_section.pack(fill=X, pady=5)
        
        ttk.Label(bootkit_section, text="OS Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.bootkit_os_var = tk.StringVar(value="linux")
        bootkit_os_combo = ttk.Combobox(bootkit_section, textvariable=self.bootkit_os_var,
                                        values=["linux", "windows"])
        bootkit_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(bootkit_section, text="Cr√©er Bootkit", 
                  command=self.create_bootkit).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Section firmware persistence
        firmware_section = ttk.LabelFrame(main_frame, text="Persistance Firmware")
        firmware_section.pack(fill=X, pady=5)
        
        ttk.Label(firmware_section, text="OS Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.firmware_os_var = tk.StringVar(value="linux")
        firmware_os_combo = ttk.Combobox(firmware_section, textvariable=self.firmware_os_var,
                                        values=["linux", "windows"])
        firmware_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(firmware_section, text="Cr√©er Persistance Firmware", 
                  command=self.create_firmware_persistence).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Section kernel rootkits
        kernel_section = ttk.LabelFrame(main_frame, text="Kernel Rootkits")
        kernel_section.pack(fill=X, pady=5)
        
        ttk.Label(kernel_section, text="OS Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.kernel_os_var = tk.StringVar(value="linux")
        kernel_os_combo = ttk.Combobox(kernel_section, textvariable=self.kernel_os_var,
                                      values=["linux", "windows"])
        kernel_os_combo.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(kernel_section, text="Cr√©er Kernel Rootkit", 
                  command=self.create_kernel_rootkit).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Section hypervisor rootkits
        hypervisor_section = ttk.LabelFrame(main_frame, text="Hypervisor Rootkits")
        hypervisor_section.pack(fill=X, pady=5)
        
        ttk.Button(hypervisor_section, text="Cr√©er Hypervisor Rootkit", 
                  command=self.create_hypervisor_rootkit).grid(row=0, column=0, columnspan=2, pady=10)
        
        # Log persistance
        log_frame = ttk.LabelFrame(main_frame, text="Log Persistance")
        log_frame.pack(fill=BOTH, expand=True, pady=5)
        
        self.persistence_log = scrolledtext.ScrolledText(log_frame, height=10)
        self.persistence_log.pack(fill=BOTH, expand=True, padx=5, pady=5)

    def setup_web_exploitation_tab(self):
        """Onglet exploitation web"""
        web_frame = ttk.Frame(self.notebook)
        self.notebook.add(web_frame, text="üåê Web Exploitation")
        
        # Frame principale
        main_frame = ttk.Frame(web_frame)
        main_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # Section SQL Injection
        sql_section = ttk.LabelFrame(main_frame, text="SQL Injection")
        sql_section.pack(fill=X, pady=5)
        
        ttk.Label(sql_section, text="URL Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.sql_url_var = tk.StringVar(value="http://target.com/page?id=1")
        sql_url_entry = ttk.Entry(sql_section, textvariable=self.sql_url_var, width=40)
        sql_url_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(sql_section, text="Points d'injection:").grid(row=1, column=0, padx=5, pady=5)
        self.sql_points_var = tk.StringVar(value="id,user,search")
        sql_points_entry = ttk.Entry(sql_section, textvariable=self.sql_points_var, width=40)
        sql_points_entry.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Button(sql_section, text="Scanner SQL Injection", 
                  command=self.scan_sql_injection).grid(row=2, column=0, columnspan=2, pady=10)
        
        # Section XSS
        xss_section = ttk.LabelFrame(main_frame, text="Cross-Site Scripting (XSS)")
        xss_section.pack(fill=X, pady=5)
        
        ttk.Label(xss_section, text="URL Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.xss_url_var = tk.StringVar(value="http://target.com/search?q=test")
        xss_url_entry = ttk.Entry(xss_section, textvariable=self.xss_url_var, width=40)
        xss_url_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(xss_section, text="Points d'injection:").grid(row=1, column=0, padx=5, pady=5)
        self.xss_points_var = tk.StringVar(value="q,search,param")
        xss_points_entry = ttk.Entry(xss_section, textvariable=self.xss_points_var, width=40)
        xss_points_entry.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Button(xss_section, text="Scanner XSS", 
                  command=self.scan_xss).grid(row=2, column=0, columnspan=2, pady=10)
        
        # Section CSRF
        csrf_section = ttk.LabelFrame(main_frame, text="Cross-Site Request Forgery (CSRF)")
        csrf_section.pack(fill=X, pady=5)
        
        ttk.Label(csrf_section, text="URL Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.csrf_url_var = tk.StringVar(value="http://target.com/")
        csrf_url_entry = ttk.Entry(csrf_section, textvariable=self.csrf_url_var, width=40)
        csrf_url_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(csrf_section, text="URL Action:").grid(row=1, column=0, padx=5, pady=5)
        self.csrf_action_var = tk.StringVar(value="http://target.com/delete")
        csrf_action_entry = ttk.Entry(csrf_section, textvariable=self.csrf_action_var, width=40)
        csrf_action_entry.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Button(csrf_section, text="G√©n√©rer Exploit CSRF", 
                  command=self.generate_csrf_exploit).grid(row=2, column=0, columnspan=2, pady=10)
        
        # Section File Upload
        upload_section = ttk.LabelFrame(main_frame, text="File Upload Exploit")
        upload_section.pack(fill=X, pady=5)
        
        ttk.Label(upload_section, text="URL Upload:").grid(row=0, column=0, padx=5, pady=5)
        self.upload_url_var = tk.StringVar(value="http://target.com/upload")
        upload_url_entry = ttk.Entry(upload_section, textvariable=self.upload_url_var, width=40)
        upload_url_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(upload_section, text="Chemin Upload:").grid(row=1, column=0, padx=5, pady=5)
        self.upload_path_var = tk.StringVar(value="/uploads/")
        upload_path_entry = ttk.Entry(upload_section, textvariable=self.upload_path_var, width=40)
        upload_path_entry.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Button(upload_section, text="Cr√©er Exploit Upload", 
                  command=self.create_upload_exploit).grid(row=2, column=0, columnspan=2, pady=10)
        
        # Log web exploitation
        log_frame = ttk.LabelFrame(main_frame, text="Log Web Exploitation")
        log_frame.pack(fill=BOTH, expand=True, pady=5)
        
        self.web_exploit_log = scrolledtext.ScrolledText(log_frame, height=10)
        self.web_exploit_log.pack(fill=BOTH, expand=True, padx=5, pady=5)

    def setup_osint_tab(self):
        """Onglet OSINT"""
        osint_frame = ttk.Frame(self.notebook)
        self.notebook.add(osint_frame, text="üîç OSINT")
        
        # Frame principale
        main_frame = ttk.Frame(osint_frame)
        main_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # Section sous-domaines
        subdomain_section = ttk.LabelFrame(main_frame, text="√ânum√©ration Sous-domaines")
        subdomain_section.pack(fill=X, pady=5)
        
        ttk.Label(subdomain_section, text="Domaine Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.subdomain_target_var = tk.StringVar(value="example.com")
        subdomain_target_entry = ttk.Entry(subdomain_section, textvariable=self.subdomain_target_var, width=40)
        subdomain_target_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(subdomain_section, text="√ânum√©rer Sous-domaines", 
                  command=self.enumerate_subdomains).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Section r√©colte emails
        email_section = ttk.LabelFrame(main_frame, text="R√©colte Emails")
        email_section.pack(fill=X, pady=5)
        
        ttk.Label(email_section, text="Domaine Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.email_target_var = tk.StringVar(value="example.com")
        email_target_entry = ttk.Entry(email_section, textvariable=self.email_target_var, width=40)
        email_target_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(email_section, text="R√©colter Emails", 
                  command=self.harvest_emails).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Section r√©seaux sociaux
        social_section = ttk.LabelFrame(main_frame, text="OSINT R√©seaux Sociaux")
        social_section.pack(fill=X, pady=5)
        
        ttk.Label(social_section, text="Organisation:").grid(row=0, column=0, padx=5, pady=5)
        self.social_target_var = tk.StringVar(value="Example Corp")
        social_target_entry = ttk.Entry(social_section, textvariable=self.social_target_var, width=40)
        social_target_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(social_section, text="OSINT R√©seaux Sociaux", 
                  command=self.social_media_osint).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Section Certificate Transparency
        ct_section = ttk.LabelFrame(main_frame, text="Certificate Transparency")
        ct_section.pack(fill=X, pady=5)
        
        ttk.Label(ct_section, text="Domaine Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.ct_target_var = tk.StringVar(value="example.com")
        ct_target_entry = ttk.Entry(ct_section, textvariable=self.ct_target_var, width=40)
        ct_target_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(ct_section, text="Surveiller Certificats", 
                  command=self.monitor_certificates).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Log OSINT
        log_frame = ttk.LabelFrame(main_frame, text="Log OSINT")
        log_frame.pack(fill=BOTH, expand=True, pady=5)
        
        self.osint_log = scrolledtext.ScrolledText(log_frame, height=10)
        self.osint_log.pack(fill=BOTH, expand=True, padx=5, pady=5)

    def setup_ad_tab(self):
        """Onglet Active Directory"""
        ad_frame = ttk.Frame(self.notebook)
        self.notebook.add(ad_frame, text="üè¢ Active Directory")
        
        # Frame principale
        main_frame = ttk.Frame(ad_frame)
        main_frame.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # Section Kerberos
        kerberos_section = ttk.LabelFrame(main_frame, text="Attaques Kerberos")
        kerberos_section.pack(fill=X, pady=5)
        
        ttk.Label(kerberos_section, text="Domaine Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.kerberos_domain_var = tk.StringVar(value="example.local")
        kerberos_domain_entry = ttk.Entry(kerberos_section, textvariable=self.kerberos_domain_var, width=40)
        kerberos_domain_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(kerberos_section, text="Liste Utilisateurs:").grid(row=1, column=0, padx=5, pady=5)
        self.kerberos_users_var = tk.StringVar(value="admin,user,test")
        kerberos_users_entry = ttk.Entry(kerberos_section, textvariable=self.kerberos_users_var, width=40)
        kerberos_users_entry.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Button(kerberos_section, text="Attaque Kerberos", 
                  command=self.kerberos_attack).grid(row=2, column=0, columnspan=2, pady=10)
        
        # Section BloodHound
        bloodhound_section = ttk.LabelFrame(main_frame, text="BloodHound")
        bloodhound_section.pack(fill=X, pady=5)
        
        ttk.Label(bloodhound_section, text="Domaine Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.bloodhound_domain_var = tk.StringVar(value="example.local")
        bloodhound_domain_entry = ttk.Entry(bloodhound_section, textvariable=self.bloodhound_domain_var, width=40)
        bloodhound_domain_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(bloodhound_section, text="Collecte BloodHound", 
                  command=self.bloodhound_collection).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Section mouvement lat√©ral
        lateral_section = ttk.LabelFrame(main_frame, text="Mouvement Lat√©ral")
        lateral_section.pack(fill=X, pady=5)
        
        ttk.Label(lateral_section, text="Domaine Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.lateral_domain_var = tk.StringVar(value="example.local")
        lateral_domain_entry = ttk.Entry(lateral_section, textvariable=self.lateral_domain_var, width=40)
        lateral_domain_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(lateral_section, text="H√¥tes Compromis:").grid(row=1, column=0, padx=5, pady=5)
        self.lateral_hosts_var = tk.StringVar(value="host1,host2,host3")
        lateral_hosts_entry = ttk.Entry(lateral_section, textvariable=self.lateral_hosts_var, width=40)
        lateral_hosts_entry.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Button(lateral_section, text="Mouvement Lat√©ral", 
                  command=self.lateral_movement).grid(row=2, column=0, columnspan=2, pady=10)
        
        # Section escalade privil√®ges
        escalation_section = ttk.LabelFrame(main_frame, text="Escalade Privil√®ges AD")
        escalation_section.pack(fill=X, pady=5)
        
        ttk.Label(escalation_section, text="Domaine Cible:").grid(row=0, column=0, padx=5, pady=5)
        self.escalation_domain_var = tk.StringVar(value="example.local")
        escalation_domain_entry = ttk.Entry(escalation_section, textvariable=self.escalation_domain_var, width=40)
        escalation_domain_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(escalation_section, text="Escalade Privil√®ges", 
                  command=self.ad_privilege_escalation).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Log AD
        log_frame = ttk.LabelFrame(main_frame, text="Log Active Directory")
        log_frame.pack(fill=BOTH, expand=True, pady=5)
        
        self.ad_log = scrolledtext.ScrolledText(log_frame, height=10)
        self.ad_log.pack(fill=BOTH, expand=True, padx=5, pady=5)

    def refresh_templates(self):
        """Actualise la liste des templates"""
        self.template_listbox.delete(0, tk.END)
        templates = self.get_available_templates()
        
        for template in templates:
            self.template_listbox.insert(tk.END, os.path.basename(template))
            
    def get_available_templates(self):
        """Retourne la liste des templates disponibles"""
        templates = []
        if os.path.exists("templates"):
            for file in os.listdir("templates"):
                if file.endswith('.html'):
                    templates.append(os.path.join("templates", file))
        return templates
        
    def start_server(self):
        """D√©marre le serveur"""
        try:
            host = self.host_entry.get()
            port = int(self.port_entry.get())
            
            # S√©lectionner le template
            selection = self.template_listbox.curselection()
            if selection:
                templates = self.get_available_templates()
                template_path = templates[selection[0]]
                self.phishing.set_template(template_path)
                self.selected_template = template_path
            
            # D√©marrer le serveur
            self.phishing.start_server(host, port)
            self.server_running = True
            
            # Mettre √† jour l'interface
            self.start_server_btn.config(state='disabled')
            self.stop_server_btn.config(state='normal')
            self.server_url_label.config(text=f"URL: http://{host}:{port}")
            
            # Auto-ouverture navigateur
            if self.auto_browser_var.get():
                webbrowser.open(f"http://{host}:{port}")
                
            messagebox.showinfo("‚úÖ Succ√®s", f"Serveur d√©marr√© sur http://{host}:{port}")
            
        except Exception as e:
            messagebox.showerror("‚ùå Erreur", f"Erreur d√©marrage serveur: {e}")
            
    def stop_server(self):
        """Arr√™te le serveur"""
        try:
            self.phishing.stop_server()
            self.server_running = False
            
            # Mettre √† jour l'interface
            self.start_server_btn.config(state='normal')
            self.stop_server_btn.config(state='disabled')
            self.server_url_label.config(text="URL: Serveur arr√™t√©")
            
            messagebox.showinfo("‚úÖ Succ√®s", "Serveur arr√™t√©")
            
        except Exception as e:
            messagebox.showerror("‚ùå Erreur", f"Erreur arr√™t serveur: {e}")
            
    def clone_site(self):
        """Clone un site"""
        url = self.clone_url_entry.get()
        if not url:
            messagebox.showerror("‚ùå Erreur", "Veuillez entrer une URL")
            return
            
        def clone_thread():
            try:
                self.clone_log.insert(tk.END, f"üåê Clonage de: {url}\n")
                self.clone_log.see(tk.END)
                
                template_path = self.cloner.clone_site(url)
                
                if template_path:
                    self.clone_log.insert(tk.END, f"‚úÖ Site clon√©: {template_path}\n")
                    self.phishing.set_template(template_path)
                    messagebox.showinfo("‚úÖ Succ√®s", f"Site clon√©: {template_path}")
                else:
                    self.clone_log.insert(tk.END, "‚ùå Erreur de clonage\n")
                    messagebox.showerror("‚ùå Erreur", "Erreur lors du clonage")
                    
            except Exception as e:
                self.clone_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                messagebox.showerror("‚ùå Erreur", f"Erreur: {e}")
                
        threading.Thread(target=clone_thread, daemon=True).start()
        
    def create_custom_template(self):
        """Cr√©e un template personnalis√©"""
        # Interface pour cr√©er un template personnalis√©
        custom_window = tk.Toplevel(self.root)
        custom_window.title("üé® Template Personnalis√©")
        custom_window.geometry("600x400")
        custom_window.configure(bg=self.colors['bg'])
        
        # URL
        tk.Label(custom_window, text="URL du site:", bg=self.colors['bg'], fg=self.colors['fg']).pack(pady=5)
        url_entry = tk.Entry(custom_window, bg=self.colors['secondary'], fg=self.colors['fg'])
        url_entry.pack(fill='x', padx=20, pady=5)
        
        # Champs personnalis√©s
        tk.Label(custom_window, text="Champs du formulaire:", bg=self.colors['bg'], fg=self.colors['fg']).pack(pady=10)
        
        fields_frame = tk.Frame(custom_window, bg=self.colors['bg'])
        fields_frame.pack(fill='both', expand=True, padx=20)
        
        fields = []
        
        def add_field():
            field_frame = tk.Frame(fields_frame, bg=self.colors['secondary'])
            field_frame.pack(fill='x', pady=5)
            
            name_entry = tk.Entry(field_frame, bg=self.colors['bg'], fg=self.colors['fg'])
            name_entry.pack(side='left', padx=5)
            name_entry.insert(0, "field_name")
            
            label_entry = tk.Entry(field_frame, bg=self.colors['bg'], fg=self.colors['fg'])
            label_entry.pack(side='left', padx=5)
            label_entry.insert(0, "Field Label")
            
            type_var = tk.StringVar(value="text")
            type_combo = ttk.Combobox(field_frame, textvariable=type_var, 
                                     values=["text", "password", "email", "number"])
            type_combo.pack(side='left', padx=5)
            
            fields.append({
                'frame': field_frame,
                'name': name_entry,
                'label': label_entry,
                'type': type_var
            })
            
        def create_template():
            url = url_entry.get()
            if not url:
                messagebox.showerror("‚ùå Erreur", "Veuillez entrer une URL")
                return
                
            custom_fields = []
            for field in fields:
                custom_fields.append({
                    'name': field['name'].get(),
                    'label': field['label'].get(),
                    'type': field['type'].get()
                })
                
            try:
                template_path = self.cloner.create_custom_template(url, custom_fields)
                messagebox.showinfo("‚úÖ Succ√®s", f"Template cr√©√©: {template_path}")
                custom_window.destroy()
            except Exception as e:
                messagebox.showerror("‚ùå Erreur", f"Erreur: {e}")
                
        # Boutons
        buttons_frame = tk.Frame(custom_window, bg=self.colors['bg'])
        buttons_frame.pack(fill='x', pady=20)
        
        tk.Button(buttons_frame, text="‚ûï Ajouter Champ", command=add_field,
                 bg=self.colors['accent'], fg='black').pack(side='left', padx=5)
        
        tk.Button(buttons_frame, text="üé® Cr√©er Template", command=create_template,
                 bg=self.colors['success'], fg='black').pack(side='left', padx=5)
        
        # Ajouter un premier champ
        add_field()
        
    def launch_attack(self):
        """Lance une attaque"""
        attack_type = self.attack_type_var.get()
        target = self.target_entry.get()
        
        if not target:
            messagebox.showerror("‚ùå Erreur", "Veuillez entrer une cible")
            return
            
        def attack_thread():
            try:
                self.attack_log.insert(tk.END, f"‚ö° Lancement attaque {attack_type} sur {target}\n")
                self.attack_log.see(tk.END)
                
                if attack_type == "scan":
                    result = self.attacks.network_scan(target)
                elif attack_type == "ssh":
                    username = "admin"  # √Ä am√©liorer
                    wordlist = "wordlist.txt"  # √Ä am√©liorer
                    result = self.attacks.ssh_brute_force(target, username, wordlist)
                elif attack_type == "web":
                    result = self.attacks.web_enumeration(target)
                elif attack_type == "sql":
                    result = self.attacks.sql_injection_test(target)
                elif attack_type == "xss":
                    result = self.attacks.xss_test(target)
                    
                self.attack_log.insert(tk.END, f"‚úÖ Attaque termin√©e\n")
                self.attack_log.see(tk.END)
                
            except Exception as e:
                self.attack_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
                self.attack_log.see(tk.END)
                
        threading.Thread(target=attack_thread, daemon=True).start()
        
    def show_attack_results(self):
        """Affiche les r√©sultats d'attaques"""
        results = self.attacks.get_attack_results()
        
        if not results:
            messagebox.showinfo("üìä R√©sultats", "Aucun r√©sultat d'attaque disponible")
            return
            
        # Cr√©er une fen√™tre pour afficher les r√©sultats
        results_window = tk.Toplevel(self.root)
        results_window.title("üìä R√©sultats d'Attaques")
        results_window.geometry("800x600")
        results_window.configure(bg=self.colors['bg'])
        
        text_widget = scrolledtext.ScrolledText(results_window, 
                                               bg=self.colors['secondary'],
                                               fg=self.colors['fg'])
        text_widget.pack(fill='both', expand=True, padx=10, pady=10)
        
        text_widget.insert(tk.END, json.dumps(results, indent=2))
        
    def start_ngrok(self):
        """D√©marre Ngrok"""
        def ngrok_thread():
            try:
                self.tunnel_status_text.insert(tk.END, "üöá D√©marrage Ngrok...\n")
                self.tunnel_status_text.see(tk.END)
                
                url = self.tunnels.start_ngrok(8080)
                
                if url:
                    self.tunnel_status_text.insert(tk.END, f"‚úÖ Ngrok: {url}\n")
                    self.current_tunnel = url
                else:
                    self.tunnel_status_text.insert(tk.END, "‚ùå Erreur Ngrok\n")
                    
                self.tunnel_status_text.see(tk.END)
                
            except Exception as e:
                self.tunnel_status_text.insert(tk.END, f"‚ùå Erreur: {e}\n")
                self.tunnel_status_text.see(tk.END)
                
        threading.Thread(target=ngrok_thread, daemon=True).start()
        
    def start_cloudflare(self):
        """D√©marre Cloudflare"""
        def cloudflare_thread():
            try:
                self.tunnel_status_text.insert(tk.END, "‚òÅÔ∏è D√©marrage Cloudflare...\n")
                self.tunnel_status_text.see(tk.END)
                
                url = self.tunnels.start_cloudflare_tunnel(8080)
                
                if url:
                    self.tunnel_status_text.insert(tk.END, f"‚úÖ Cloudflare: {url}\n")
                    self.current_tunnel = url
                else:
                    self.tunnel_status_text.insert(tk.END, "‚ùå Erreur Cloudflare\n")
                    
                self.tunnel_status_text.see(tk.END)
                
            except Exception as e:
                self.tunnel_status_text.insert(tk.END, f"‚ùå Erreur: {e}\n")
                self.tunnel_status_text.see(tk.END)
                
        threading.Thread(target=cloudflare_thread, daemon=True).start()
        
    def start_localtunnel(self):
        """D√©marre LocalTunnel"""
        def localtunnel_thread():
            try:
                self.tunnel_status_text.insert(tk.END, "üåê D√©marrage LocalTunnel...\n")
                self.tunnel_status_text.see(tk.END)
                
                url = self.tunnels.start_localtunnel(8080)
                
                if url:
                    self.tunnel_status_text.insert(tk.END, f"‚úÖ LocalTunnel: {url}\n")
                    self.current_tunnel = url
                else:
                    self.tunnel_status_text.insert(tk.END, "‚ùå Erreur LocalTunnel\n")
                    
                self.tunnel_status_text.see(tk.END)
                
            except Exception as e:
                self.tunnel_status_text.insert(tk.END, f"‚ùå Erreur: {e}\n")
                self.tunnel_status_text.see(tk.END)
                
        threading.Thread(target=localtunnel_thread, daemon=True).start()
        
    def start_proxy(self):
        """D√©marre le proxy"""
        def proxy_thread():
            try:
                self.tunnel_status_text.insert(tk.END, "üîÑ D√©marrage Proxy...\n")
                self.tunnel_status_text.see(tk.END)
                
                url = self.tunnels.start_proxy_server(8080, 9090)
                
                if url:
                    self.tunnel_status_text.insert(tk.END, f"‚úÖ Proxy: {url}\n")
                    self.current_tunnel = url
                else:
                    self.tunnel_status_text.insert(tk.END, "‚ùå Erreur Proxy\n")
                    
                self.tunnel_status_text.see(tk.END)
                
            except Exception as e:
                self.tunnel_status_text.insert(tk.END, f"‚ùå Erreur: {e}\n")
                self.tunnel_status_text.see(tk.END)
                
        threading.Thread(target=proxy_thread, daemon=True).start()
        
    def refresh_tunnel_status(self):
        """Actualise le status des tunnels"""
        tunnels = self.tunnels.get_active_tunnels()
        
        self.tunnel_status_text.delete(1.0, tk.END)
        
        if tunnels:
            for name, tunnel in tunnels.items():
                self.tunnel_status_text.insert(tk.END, f"‚úÖ {name}: {tunnel.get('public_url', 'N/A')}\n")
        else:
            self.tunnel_status_text.insert(tk.END, "‚ùå Aucun tunnel actif\n")
            
    def stop_all_tunnels(self):
        """Arr√™te tous les tunnels"""
        self.tunnels.stop_all_tunnels()
        self.tunnel_status_text.insert(tk.END, "‚èπÔ∏è Tous les tunnels arr√™t√©s\n")
        self.tunnel_status_text.see(tk.END)
        
    def update_stats(self):
        """Met √† jour les statistiques"""
        try:
            stats = self.phishing.get_stats()
            
            # Mettre √† jour les labels
            self.stats_labels['total_victims'].config(text=str(stats['total_victims']))
            self.stats_labels['successful_attacks'].config(text=str(stats['successful_attacks']))
            self.stats_labels['captured_credentials'].config(text=str(stats['captured_credentials']))
            
            # Compter les pays
            countries = len(stats.get('geographic_data', {}))
            self.stats_labels['countries'].config(text=str(countries))
            
            # Mettre √† jour les credentials
            credentials = self.phishing.get_credentials()
            self.creds_text.delete(1.0, tk.END)
            
            if credentials:
                for cred in credentials[-10:]:  # 10 derniers
                    email = cred.get('email', 'N/A')
                    ip = cred.get('ip_address', 'N/A')
                    timestamp = cred.get('timestamp', 'N/A')
                    self.creds_text.insert(tk.END, f"üìß {email} | üåê {ip} | ‚è∞ {timestamp}\n")
            else:
                self.creds_text.insert(tk.END, "Aucun credential captur√©")
                
        except Exception as e:
            print(f"Erreur mise √† jour stats: {e}")
            
        # Programmer la prochaine mise √† jour
        self.root.after(5000, self.update_stats)  # Toutes les 5 secondes
        
    def export_credentials(self):
        """Exporte les credentials"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                self.phishing.export_credentials(filename)
                messagebox.showinfo("‚úÖ Succ√®s", f"Credentials export√©s vers {filename}")
            except Exception as e:
                messagebox.showerror("‚ùå Erreur", f"Erreur export: {e}")
                
    def export_stats(self):
        """Exporte les statistiques"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                stats = self.phishing.get_stats()
                with open(filename, 'w') as f:
                    json.dump(stats, f, indent=2)
                messagebox.showinfo("‚úÖ Succ√®s", f"Stats export√©es vers {filename}")
            except Exception as e:
                messagebox.showerror("‚ùå Erreur", f"Erreur export: {e}")
                
    def save_config(self):
        """Sauvegarde la configuration"""
        config = {
            'auto_start': self.auto_start_var.get(),
            'auto_browser': self.auto_browser_var.get(),
            'auto_save': self.auto_save_var.get(),
            'host': self.host_entry.get(),
            'port': self.port_entry.get()
        }
        
        try:
            with open('config.json', 'w') as f:
                json.dump(config, f, indent=2)
            messagebox.showinfo("‚úÖ Succ√®s", "Configuration sauvegard√©e")
        except Exception as e:
            messagebox.showerror("‚ùå Erreur", f"Erreur sauvegarde: {e}")
            
    def reset_config(self):
        """R√©initialise la configuration"""
        if messagebox.askyesno("üîÑ Confirmation", "R√©initialiser la configuration ?"):
            self.auto_start_var.set(False)
            self.auto_browser_var.set(False)
            self.auto_save_var.set(True)
            self.host_entry.delete(0, tk.END)
            self.host_entry.insert(0, "0.0.0.0")
            self.port_entry.delete(0, tk.END)
            self.port_entry.insert(0, "8080")
            
    def open_templates_folder(self):
        """Ouvre le dossier des templates"""
        import subprocess
        import platform
        
        templates_path = os.path.abspath("templates")
        
        if platform.system() == "Windows":
            subprocess.run(["explorer", templates_path])
        elif platform.system() == "Darwin":  # macOS
            subprocess.run(["open", templates_path])
        else:  # Linux
            subprocess.run(["xdg-open", templates_path])
            
    def open_logs_folder(self):
        """Ouvre le dossier des logs"""
        import subprocess
        import platform
        
        logs_path = os.path.abspath("logs")
        
        if not os.path.exists(logs_path):
            os.makedirs(logs_path)
            
        if platform.system() == "Windows":
            subprocess.run(["explorer", logs_path])
        elif platform.system() == "Darwin":  # macOS
            subprocess.run(["open", logs_path])
        else:  # Linux
            subprocess.run(["xdg-open", logs_path])
    
    # ===== M√âTHODES MANQUANTES POUR LES EXPLOITS AVANC√âS =====
    
    def create_custom_exploit(self):
        """Cr√©e un exploit personnalis√©"""
        try:
            os_target = self.exploit_os_var.get()
            exploit_type = self.exploit_type_var.get()
            payload = self.exploit_payload_var.get()
            
            self.exploit_log.insert(tk.END, f"üí• Cr√©ation exploit {exploit_type} pour {os_target}...\n")
            self.exploit_log.see(tk.END)
            
            result = self.exploit.create_custom_exploit(os_target, exploit_type, payload)
            
            if result:
                self.exploit_log.insert(tk.END, f"‚úÖ Exploit cr√©√©: {result}\n")
            else:
                self.exploit_log.insert(tk.END, "‚ùå Erreur cr√©ation exploit\n")
                
            self.exploit_log.see(tk.END)
            
        except Exception as e:
            self.exploit_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.exploit_log.see(tk.END)
    
    def create_privilege_escalation(self):
        """Cr√©e un script d'escalade de privil√®ges"""
        try:
            os_target = self.escalation_os_var.get()
            method = self.escalation_method_var.get()
            
            self.exploit_log.insert(tk.END, f"üîì Cr√©ation script escalade {method} pour {os_target}...\n")
            self.exploit_log.see(tk.END)
            
            result = self.exploit.create_privilege_escalation_script(os_target, method)
            
            if result:
                self.exploit_log.insert(tk.END, f"‚úÖ Script escalade cr√©√©: {result}\n")
            else:
                self.exploit_log.insert(tk.END, "‚ùå Erreur cr√©ation script escalade\n")
                
            self.exploit_log.see(tk.END)
            
        except Exception as e:
            self.exploit_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.exploit_log.see(tk.END)
    
    def create_polymorphic_virus(self):
        """Cr√©e un virus polymorphe"""
        try:
            os_target = self.virus_os_var.get()
            
            self.exploit_log.insert(tk.END, f"ü¶† Cr√©ation virus polymorphe pour {os_target}...\n")
            self.exploit_log.see(tk.END)
            
            result = self.exploit.create_polymorphic_virus(os_target)
            
            if result:
                self.exploit_log.insert(tk.END, f"‚úÖ Virus polymorphe cr√©√©: {result}\n")
            else:
                self.exploit_log.insert(tk.END, "‚ùå Erreur cr√©ation virus polymorphe\n")
                
            self.exploit_log.see(tk.END)
            
        except Exception as e:
            self.exploit_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.exploit_log.see(tk.END)
    
    # ===== M√âTHODES MANQUANTES POUR L'ING√âNIERIE SOCIALE =====
    
    def create_phishing_campaign(self):
        """Cr√©e une campagne de phishing"""
        try:
            campaign_type = self.campaign_type_var.get()
            pretext = self.campaign_pretext_var.get()
            
            self.social_log.insert(tk.END, f"üß† Cr√©ation campagne {campaign_type}...\n")
            self.social_log.see(tk.END)
            
            result = self.social.create_phishing_campaign(campaign_type, pretext)
            
            if result:
                self.social_log.insert(tk.END, f"‚úÖ Campagne cr√©√©e: {result}\n")
            else:
                self.social_log.insert(tk.END, "‚ùå Erreur cr√©ation campagne\n")
                
            self.social_log.see(tk.END)
            
        except Exception as e:
            self.social_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.social_log.see(tk.END)
    
    def create_pretext_scenario(self):
        """Cr√©e un sc√©nario de pr√©texte"""
        try:
            pretext_type = self.pretext_type_var.get()
            
            self.social_log.insert(tk.END, f"üé≠ Cr√©ation sc√©nario {pretext_type}...\n")
            self.social_log.see(tk.END)
            
            result = self.social.create_pretext_scenario(pretext_type)
            
            if result:
                self.social_log.insert(tk.END, f"‚úÖ Sc√©nario cr√©√©: {result}\n")
            else:
                self.social_log.insert(tk.END, "‚ùå Erreur cr√©ation sc√©nario\n")
                
            self.social_log.see(tk.END)
            
        except Exception as e:
            self.social_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.social_log.see(tk.END)
    
    def create_vishing_script(self):
        """Cr√©e un script vishing"""
        try:
            vishing_type = self.vishing_type_var.get()
            
            self.social_log.insert(tk.END, f"üìû Cr√©ation script vishing {vishing_type}...\n")
            self.social_log.see(tk.END)
            
            result = self.social.create_vishing_script(vishing_type)
            
            if result:
                self.social_log.insert(tk.END, f"‚úÖ Script vishing cr√©√©: {result}\n")
            else:
                self.social_log.insert(tk.END, "‚ùå Erreur cr√©ation script vishing\n")
                
            self.social_log.see(tk.END)
            
        except Exception as e:
            self.social_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.social_log.see(tk.END)
    
    # ===== M√âTHODES MANQUANTES POUR LES OP√âRATIONS FURTIVES =====
    
    def create_stealth_payload(self):
        """Cr√©e un payload furtif"""
        try:
            os_target = self.stealth_os_var.get()
            level = self.stealth_level_var.get()
            
            self.stealth_log.insert(tk.END, f"üëª Cr√©ation payload furtif {level} pour {os_target}...\n")
            self.stealth_log.see(tk.END)
            
            result = self.stealth.create_stealth_payload(os_target, level)
            
            if result:
                self.stealth_log.insert(tk.END, f"‚úÖ Payload furtif cr√©√©: {result}\n")
            else:
                self.stealth_log.insert(tk.END, "‚ùå Erreur cr√©ation payload furtif\n")
                
            self.stealth_log.see(tk.END)
            
        except Exception as e:
            self.stealth_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.stealth_log.see(tk.END)
    
    def create_rootkit(self):
        """Cr√©e un rootkit"""
        try:
            os_target = self.rootkit_os_var.get()
            
            self.stealth_log.insert(tk.END, f"üï∑Ô∏è Cr√©ation rootkit pour {os_target}...\n")
            self.stealth_log.see(tk.END)
            
            result = self.stealth.create_rootkit(os_target)
            
            if result:
                self.stealth_log.insert(tk.END, f"‚úÖ Rootkit cr√©√©: {result}\n")
            else:
                self.stealth_log.insert(tk.END, "‚ùå Erreur cr√©ation rootkit\n")
                
            self.stealth_log.see(tk.END)
            
        except Exception as e:
            self.stealth_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.stealth_log.see(tk.END)
    
    def create_anti_forensics_tool(self):
        """Cr√©e un outil anti-forensics"""
        try:
            self.stealth_log.insert(tk.END, "üîí Cr√©ation outil anti-forensics...\n")
            self.stealth_log.see(tk.END)
            
            result = self.stealth.create_anti_forensics_tool()
            
            if result:
                self.stealth_log.insert(tk.END, f"‚úÖ Outil anti-forensics cr√©√©: {result}\n")
            else:
                self.stealth_log.insert(tk.END, "‚ùå Erreur cr√©ation outil anti-forensics\n")
                
            self.stealth_log.see(tk.END)
            
        except Exception as e:
            self.stealth_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.stealth_log.see(tk.END)
    
    # ===== M√âTHODES MANQUANTES POUR LE MALWARE AVANC√â =====
    
    def create_keylogger(self):
        """Cr√©e un keylogger"""
        try:
            os_target = self.keylogger_os_var.get()
            
            self.malware_log.insert(tk.END, f"‚å®Ô∏è Cr√©ation keylogger pour {os_target}...\n")
            self.malware_log.see(tk.END)
            
            result = self.malware.create_keylogger(os_target)
            
            if result:
                self.malware_log.insert(tk.END, f"‚úÖ Keylogger cr√©√©: {result}\n")
            else:
                self.malware_log.insert(tk.END, "‚ùå Erreur cr√©ation keylogger\n")
                
            self.malware_log.see(tk.END)
            
        except Exception as e:
            self.malware_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.malware_log.see(tk.END)
    
    def create_ransomware(self):
        """Cr√©e un ransomware"""
        try:
            os_target = self.ransomware_os_var.get()
            
            self.malware_log.insert(tk.END, f"üîí Cr√©ation ransomware pour {os_target}...\n")
            self.malware_log.see(tk.END)
            
            result = self.malware.create_ransomware(os_target)
            
            if result:
                self.malware_log.insert(tk.END, f"‚úÖ Ransomware cr√©√©: {result}\n")
            else:
                self.malware_log.insert(tk.END, "‚ùå Erreur cr√©ation ransomware\n")
                
            self.malware_log.see(tk.END)
            
        except Exception as e:
            self.malware_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.malware_log.see(tk.END)
    
    def create_cryptominer(self):
        """Cr√©e un cryptominer"""
        try:
            os_target = self.miner_os_var.get()
            
            self.malware_log.insert(tk.END, f"‚õèÔ∏è Cr√©ation cryptominer pour {os_target}...\n")
            self.malware_log.see(tk.END)
            
            result = self.malware.create_cryptominer(os_target)
            
            if result:
                self.malware_log.insert(tk.END, f"‚úÖ Cryptominer cr√©√©: {result}\n")
            else:
                self.malware_log.insert(tk.END, "‚ùå Erreur cr√©ation cryptominer\n")
                
            self.malware_log.see(tk.END)
            
        except Exception as e:
            self.malware_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.malware_log.see(tk.END)
    
    # ===== M√âTHODES MANQUANTES POUR LES EXPLOITS ZERO-DAY =====
    
    def create_buffer_overflow_exploit(self):
        """Cr√©e un exploit buffer overflow"""
        try:
            os_target = self.bof_os_var.get()
            service = self.bof_service_var.get()
            
            self.zero_day_log.insert(tk.END, f"üî• Cr√©ation exploit buffer overflow pour {service} sur {os_target}...\n")
            self.zero_day_log.see(tk.END)
            
            result = self.zero_day.create_buffer_overflow_exploit(os_target, service)
            
            if result:
                self.zero_day_log.insert(tk.END, f"‚úÖ Exploit buffer overflow cr√©√©: {result}\n")
            else:
                self.zero_day_log.insert(tk.END, "‚ùå Erreur cr√©ation exploit buffer overflow\n")
                
            self.zero_day_log.see(tk.END)
            
        except Exception as e:
            self.zero_day_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.zero_day_log.see(tk.END)
    
    def create_heap_spray_exploit(self):
        """Cr√©e un exploit heap spraying"""
        try:
            os_target = self.heap_os_var.get()
            
            self.zero_day_log.insert(tk.END, f"üí• Cr√©ation exploit heap spraying pour {os_target}...\n")
            self.zero_day_log.see(tk.END)
            
            result = self.zero_day.create_heap_spray_exploit(os_target)
            
            if result:
                self.zero_day_log.insert(tk.END, f"‚úÖ Exploit heap spraying cr√©√©: {result}\n")
            else:
                self.zero_day_log.insert(tk.END, "‚ùå Erreur cr√©ation exploit heap spraying\n")
                
            self.zero_day_log.see(tk.END)
            
        except Exception as e:
            self.zero_day_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.zero_day_log.see(tk.END)
    
    def create_rop_chain_exploit(self):
        """Cr√©e un exploit ROP chain"""
        try:
            os_target = self.rop_os_var.get()
            arch = self.rop_arch_var.get()
            
            self.zero_day_log.insert(tk.END, f"üîó Cr√©ation exploit ROP chain {arch} pour {os_target}...\n")
            self.zero_day_log.see(tk.END)
            
            result = self.zero_day.create_rop_chain_exploit(os_target, arch)
            
            if result:
                self.zero_day_log.insert(tk.END, f"‚úÖ Exploit ROP chain cr√©√©: {result}\n")
            else:
                self.zero_day_log.insert(tk.END, "‚ùå Erreur cr√©ation exploit ROP chain\n")
                
            self.zero_day_log.see(tk.END)
            
        except Exception as e:
            self.zero_day_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.zero_day_log.see(tk.END)
    
    def create_format_string_exploit(self):
        """Cr√©e un exploit format string"""
        try:
            os_target = self.format_os_var.get()
            
            self.zero_day_log.insert(tk.END, f"üìù Cr√©ation exploit format string pour {os_target}...\n")
            self.zero_day_log.see(tk.END)
            
            result = self.zero_day.create_format_string_exploit(os_target)
            
            if result:
                self.zero_day_log.insert(tk.END, f"‚úÖ Exploit format string cr√©√©: {result}\n")
            else:
                self.zero_day_log.insert(tk.END, "‚ùå Erreur cr√©ation exploit format string\n")
                
            self.zero_day_log.see(tk.END)
            
        except Exception as e:
            self.zero_day_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.zero_day_log.see(tk.END)
    
    # ===== M√âTHODES MANQUANTES POUR LA PERSISTANCE AVANC√âE =====
    
    def create_bootkit(self):
        """Cr√©e un bootkit"""
        try:
            os_target = self.bootkit_os_var.get()
            
            self.persistence_log.insert(tk.END, f"üï∑Ô∏è Cr√©ation bootkit pour {os_target}...\n")
            self.persistence_log.see(tk.END)
            
            result = self.persistence.create_bootkit(os_target)
            
            if result:
                self.persistence_log.insert(tk.END, f"‚úÖ Bootkit cr√©√©: {result}\n")
            else:
                self.persistence_log.insert(tk.END, "‚ùå Erreur cr√©ation bootkit\n")
                
            self.persistence_log.see(tk.END)
            
        except Exception as e:
            self.persistence_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.persistence_log.see(tk.END)
    
    def create_firmware_persistence(self):
        """Cr√©e une persistance firmware"""
        try:
            os_target = self.firmware_os_var.get()
            
            self.persistence_log.insert(tk.END, f"üîß Cr√©ation persistance firmware pour {os_target}...\n")
            self.persistence_log.see(tk.END)
            
            result = self.persistence.create_firmware_persistence(os_target)
            
            if result:
                self.persistence_log.insert(tk.END, f"‚úÖ Persistance firmware cr√©√©e: {result}\n")
            else:
                self.persistence_log.insert(tk.END, "‚ùå Erreur cr√©ation persistance firmware\n")
                
            self.persistence_log.see(tk.END)
            
        except Exception as e:
            self.persistence_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.persistence_log.see(tk.END)
    
    def create_kernel_rootkit(self):
        """Cr√©e un kernel rootkit"""
        try:
            os_target = self.kernel_os_var.get()
            
            self.persistence_log.insert(tk.END, f"‚öôÔ∏è Cr√©ation kernel rootkit pour {os_target}...\n")
            self.persistence_log.see(tk.END)
            
            result = self.persistence.create_kernel_rootkit(os_target)
            
            if result:
                self.persistence_log.insert(tk.END, f"‚úÖ Kernel rootkit cr√©√©: {result}\n")
            else:
                self.persistence_log.insert(tk.END, "‚ùå Erreur cr√©ation kernel rootkit\n")
                
            self.persistence_log.see(tk.END)
            
        except Exception as e:
            self.persistence_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.persistence_log.see(tk.END)
    
    def create_hypervisor_rootkit(self):
        """Cr√©e un hypervisor rootkit"""
        try:
            self.persistence_log.insert(tk.END, "üñ•Ô∏è Cr√©ation hypervisor rootkit...\n")
            self.persistence_log.see(tk.END)
            
            result = self.persistence.create_hypervisor_rootkit()
            
            if result:
                self.persistence_log.insert(tk.END, f"‚úÖ Hypervisor rootkit cr√©√©: {result}\n")
            else:
                self.persistence_log.insert(tk.END, "‚ùå Erreur cr√©ation hypervisor rootkit\n")
                
            self.persistence_log.see(tk.END)
            
        except Exception as e:
            self.persistence_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.persistence_log.see(tk.END)
    
    # ===== M√âTHODES MANQUANTES POUR L'EXPLOITATION WEB =====
    
    def scan_sql_injection(self):
        """Scanne les vuln√©rabilit√©s SQL injection"""
        try:
            url = self.sql_url_var.get()
            points = self.sql_points_var.get()
            
            self.web_exploit_log.insert(tk.END, f"üíâ Scan SQL injection sur {url}...\n")
            self.web_exploit_log.see(tk.END)
            
            result = self.web_exploit.scan_sql_injection(url, points.split(','))
            
            if result:
                self.web_exploit_log.insert(tk.END, f"‚úÖ Scan SQL injection termin√©: {len(result)} vuln√©rabilit√©s trouv√©es\n")
            else:
                self.web_exploit_log.insert(tk.END, "‚ùå Erreur scan SQL injection\n")
                
            self.web_exploit_log.see(tk.END)
            
        except Exception as e:
            self.web_exploit_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.web_exploit_log.see(tk.END)
    
    def scan_xss(self):
        """Scanne les vuln√©rabilit√©s XSS"""
        try:
            url = self.xss_url_var.get()
            points = self.xss_points_var.get()
            
            self.web_exploit_log.insert(tk.END, f"üéØ Scan XSS sur {url}...\n")
            self.web_exploit_log.see(tk.END)
            
            result = self.web_exploit.scan_xss(url, points.split(','))
            
            if result:
                self.web_exploit_log.insert(tk.END, f"‚úÖ Scan XSS termin√©: {len(result)} vuln√©rabilit√©s trouv√©es\n")
            else:
                self.web_exploit_log.insert(tk.END, "‚ùå Erreur scan XSS\n")
                
            self.web_exploit_log.see(tk.END)
            
        except Exception as e:
            self.web_exploit_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.web_exploit_log.see(tk.END)
    
    def generate_csrf_exploit(self):
        """G√©n√®re un exploit CSRF"""
        try:
            url = self.csrf_url_var.get()
            action = self.csrf_action_var.get()
            
            self.web_exploit_log.insert(tk.END, f"üîÑ G√©n√©ration exploit CSRF pour {url}...\n")
            self.web_exploit_log.see(tk.END)
            
            result = self.web_exploit.generate_csrf_exploit(url, action)
            
            if result:
                self.web_exploit_log.insert(tk.END, f"‚úÖ Exploit CSRF g√©n√©r√©: {result}\n")
            else:
                self.web_exploit_log.insert(tk.END, "‚ùå Erreur g√©n√©ration exploit CSRF\n")
                
            self.web_exploit_log.see(tk.END)
            
        except Exception as e:
            self.web_exploit_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.web_exploit_log.see(tk.END)
    
    def create_upload_exploit(self):
        """Cr√©e un exploit upload de fichier"""
        try:
            url = self.upload_url_var.get()
            path = self.upload_path_var.get()
            
            self.web_exploit_log.insert(tk.END, f"üìÅ Cr√©ation exploit upload pour {url}...\n")
            self.web_exploit_log.see(tk.END)
            
            result = self.web_exploit.create_upload_exploit(url, path)
            
            if result:
                self.web_exploit_log.insert(tk.END, f"‚úÖ Exploit upload cr√©√©: {result}\n")
            else:
                self.web_exploit_log.insert(tk.END, "‚ùå Erreur cr√©ation exploit upload\n")
                
            self.web_exploit_log.see(tk.END)
            
        except Exception as e:
            self.web_exploit_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.web_exploit_log.see(tk.END)
    
    # ===== M√âTHODES MANQUANTES POUR L'OSINT =====
    
    def enumerate_subdomains(self):
        """√ânum√®re les sous-domaines"""
        try:
            domain = self.subdomain_target_var.get()
            
            self.osint_log.insert(tk.END, f"üîç √ânum√©ration sous-domaines pour {domain}...\n")
            self.osint_log.see(tk.END)
            
            result = self.osint.enumerate_subdomains(domain)
            
            if result:
                self.osint_log.insert(tk.END, f"‚úÖ √ânum√©ration termin√©e: {len(result)} sous-domaines trouv√©s\n")
            else:
                self.osint_log.insert(tk.END, "‚ùå Erreur √©num√©ration sous-domaines\n")
                
            self.osint_log.see(tk.END)
            
        except Exception as e:
            self.osint_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.osint_log.see(tk.END)
    
    def harvest_emails(self):
        """R√©colte les emails"""
        try:
            domain = self.email_target_var.get()
            
            self.osint_log.insert(tk.END, f"üìß R√©colte emails pour {domain}...\n")
            self.osint_log.see(tk.END)
            
            result = self.osint.harvest_emails(domain)
            
            if result:
                self.osint_log.insert(tk.END, f"‚úÖ R√©colte termin√©e: {len(result)} emails trouv√©s\n")
            else:
                self.osint_log.insert(tk.END, "‚ùå Erreur r√©colte emails\n")
                
            self.osint_log.see(tk.END)
            
        except Exception as e:
            self.osint_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.osint_log.see(tk.END)
    
    def social_media_osint(self):
        """Effectue l'OSINT sur les r√©seaux sociaux"""
        try:
            organization = self.social_target_var.get()
            
            self.osint_log.insert(tk.END, f"üì± OSINT r√©seaux sociaux pour {organization}...\n")
            self.osint_log.see(tk.END)
            
            result = self.osint.social_media_osint(organization)
            
            if result:
                self.osint_log.insert(tk.END, f"‚úÖ OSINT termin√©: {len(result)} comptes trouv√©s\n")
            else:
                self.osint_log.insert(tk.END, "‚ùå Erreur OSINT r√©seaux sociaux\n")
                
            self.osint_log.see(tk.END)
            
        except Exception as e:
            self.osint_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.osint_log.see(tk.END)
    
    def monitor_certificates(self):
        """Surveille les certificats"""
        try:
            domain = self.ct_target_var.get()
            
            self.osint_log.insert(tk.END, f"üîí Surveillance certificats pour {domain}...\n")
            self.osint_log.see(tk.END)
            
            result = self.osint.monitor_certificates(domain)
            
            if result:
                self.osint_log.insert(tk.END, f"‚úÖ Surveillance termin√©e: {len(result)} certificats trouv√©s\n")
            else:
                self.osint_log.insert(tk.END, "‚ùå Erreur surveillance certificats\n")
                
            self.osint_log.see(tk.END)
            
        except Exception as e:
            self.osint_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.osint_log.see(tk.END)
    
    # ===== M√âTHODES MANQUANTES POUR ACTIVE DIRECTORY =====
    
    def kerberos_attack(self):
        """Lance une attaque Kerberos"""
        try:
            domain = self.kerberos_domain_var.get()
            users = self.kerberos_users_var.get()
            
            self.ad_log.insert(tk.END, f"üîë Attaque Kerberos sur {domain}...\n")
            self.ad_log.see(tk.END)
            
            result = self.ad_attacks.kerberos_attack(domain, users.split(','))
            
            if result:
                self.ad_log.insert(tk.END, f"‚úÖ Attaque Kerberos termin√©e: {len(result)} tickets trouv√©s\n")
            else:
                self.ad_log.insert(tk.END, "‚ùå Erreur attaque Kerberos\n")
                
            self.ad_log.see(tk.END)
            
        except Exception as e:
            self.ad_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.ad_log.see(tk.END)
    
    def bloodhound_collection(self):
        """Effectue la collecte BloodHound"""
        try:
            domain = self.bloodhound_domain_var.get()
            
            self.ad_log.insert(tk.END, f"ü©∏ Collecte BloodHound pour {domain}...\n")
            self.ad_log.see(tk.END)
            
            result = self.ad_attacks.bloodhound_collection(domain)
            
            if result:
                self.ad_log.insert(tk.END, f"‚úÖ Collecte BloodHound termin√©e: {result}\n")
            else:
                self.ad_log.insert(tk.END, "‚ùå Erreur collecte BloodHound\n")
                
            self.ad_log.see(tk.END)
            
        except Exception as e:
            self.ad_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.ad_log.see(tk.END)
    
    def lateral_movement(self):
        """Effectue un mouvement lat√©ral"""
        try:
            domain = self.lateral_domain_var.get()
            hosts = self.lateral_hosts_var.get()
            
            self.ad_log.insert(tk.END, f"üîÑ Mouvement lat√©ral sur {domain}...\n")
            self.ad_log.see(tk.END)
            
            result = self.ad_attacks.lateral_movement(domain, hosts.split(','))
            
            if result:
                self.ad_log.insert(tk.END, f"‚úÖ Mouvement lat√©ral termin√©: {len(result)} h√¥tes compromis\n")
            else:
                self.ad_log.insert(tk.END, "‚ùå Erreur mouvement lat√©ral\n")
                
            self.ad_log.see(tk.END)
            
        except Exception as e:
            self.ad_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.ad_log.see(tk.END)
    
    def ad_privilege_escalation(self):
        """Effectue l'escalade de privil√®ges AD"""
        try:
            domain = self.escalation_domain_var.get()
            
            self.ad_log.insert(tk.END, f"üîì Escalade privil√®ges AD sur {domain}...\n")
            self.ad_log.see(tk.END)
            
            result = self.ad_attacks.privilege_escalation(domain)
            
            if result:
                self.ad_log.insert(tk.END, f"‚úÖ Escalade privil√®ges termin√©e: {result}\n")
            else:
                self.ad_log.insert(tk.END, "‚ùå Erreur escalade privil√®ges\n")
                
            self.ad_log.see(tk.END)
            
        except Exception as e:
            self.ad_log.insert(tk.END, f"‚ùå Erreur: {e}\n")
            self.ad_log.see(tk.END)
            
    def run(self):
        """Lance l'application"""
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            self.cleanup()
            
    def cleanup(self):
        """Nettoie les ressources"""
        print("üßπ Nettoyage...")
        if self.server_running:
            self.phishing.stop_server()
        self.tunnels.stop_all_tunnels()
        print("‚úÖ Nettoyage termin√©")

def main():
    """Fonction principale"""
    # Cr√©er les dossiers n√©cessaires
    directories = ['templates', 'cloned_sites', 'exports', 'logs']
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            
    # Lancer l'application
    app = UltimatePhishingGUI()
    app.run()

if __name__ == "__main__":
    main() 