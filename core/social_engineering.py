#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß† SOCIAL ENGINEERING - Module d'ing√©nierie sociale avanc√©e
Manipulation psychologique, phishing avanc√©, pretexting
"""

import os
import subprocess
import threading
import time
import json
import random
import string
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

class SocialEngineering:
    def __init__(self):
        self.campaigns = []
        self.active_campaigns = []
        self.victims = []
        
        # Techniques d'ing√©nierie sociale
        self.techniques = {
            'pretexting': 'Cr√©ation de faux pr√©textes',
            'phishing': 'Emails frauduleux',
            'vishing': 'Appels t√©l√©phoniques frauduleux',
            'baiting': 'App√¢ts physiques',
            'quid_pro_quo': '√âchange de services',
            'tailgating': 'Suivre quelqu\'un',
            'shoulder_surfing': 'Observer par-dessus l\'√©paule',
            'dumpster_diving': 'Fouiller les poubelles'
        }
        
    def create_phishing_campaign(self, target_list, template_type, pretext):
        """Cr√©e une campagne de phishing avanc√©e"""
        print(f"üé£ Cr√©ation campagne phishing: {template_type}")
        
        try:
            campaign_dir = "campaigns"
            os.makedirs(campaign_dir, exist_ok=True)
            
            campaign_name = f"phishing_{template_type}_{int(time.time())}"
            campaign_file = os.path.join(campaign_dir, f"{campaign_name}.json")
            
            # Templates d'emails selon le type
            email_templates = {
                'bank': {
                    'subject': 'URGENT: V√©rification de s√©curit√© requise',
                    'sender': 'security@bank.com',
                    'body': f'''
Cher client,

{pretext}

Pour des raisons de s√©curit√©, nous devons v√©rifier votre identit√©.
Veuillez cliquer sur le lien ci-dessous pour confirmer vos informations :

[LIEN_PHISHING]

Si vous ne r√©pondez pas dans les 24h, votre compte sera temporairement suspendu.

Cordialement,
Service S√©curit√© Bancaire
'''
                },
                'tech_support': {
                    'subject': 'Support technique - Probl√®me d√©tect√©',
                    'sender': 'support@techcompany.com',
                    'body': f'''
Bonjour,

{pretext}

Notre √©quipe technique a d√©tect√© une activit√© suspecte sur votre compte.
Veuillez nous contacter imm√©diatement via le lien suivant :

[LIEN_PHISHING]

Merci de votre coop√©ration.
Support Technique
'''
                },
                'social_media': {
                    'subject': 'Nouvelle connexion d√©tect√©e',
                    'sender': 'noreply@socialmedia.com',
                    'body': f'''
Alerte de s√©curit√©

{pretext}

Une nouvelle connexion a √©t√© d√©tect√©e sur votre compte.
Si ce n'√©tait pas vous, veuillez v√©rifier imm√©diatement :

[LIEN_PHISHING]

√âquipe de s√©curit√©
'''
                }
            }
            
            template = email_templates.get(template_type, email_templates['bank'])
            
            campaign_data = {
                'name': campaign_name,
                'template_type': template_type,
                'pretext': pretext,
                'targets': target_list,
                'email_template': template,
                'status': 'active',
                'created_at': datetime.now().isoformat(),
                'victims': []
            }
            
            with open(campaign_file, 'w', encoding='utf-8') as f:
                json.dump(campaign_data, f, indent=2)
            
            self.campaigns.append(campaign_data)
            print(f"‚úÖ Campagne cr√©√©e: {campaign_file}")
            return campaign_file
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation campagne: {e}")
            return None
    
    def send_phishing_emails(self, campaign_file, smtp_config):
        """Envoie les emails de phishing"""
        print(f"üìß Envoi emails phishing: {campaign_file}")
        
        try:
            with open(campaign_file, 'r', encoding='utf-8') as f:
                campaign = json.load(f)
            
            # Configuration SMTP
            smtp_server = smtp_config.get('server', 'smtp.gmail.com')
            smtp_port = smtp_config.get('port', 587)
            smtp_user = smtp_config.get('user', '')
            smtp_pass = smtp_config.get('pass', '')
            
            # Connexion SMTP
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(smtp_user, smtp_pass)
            
            template = campaign['email_template']
            
            for target in campaign['targets']:
                try:
                    # Cr√©er l'email
                    msg = MIMEMultipart()
                    msg['From'] = template['sender']
                    msg['To'] = target['email']
                    msg['Subject'] = template['subject']
                    
                    # Personnaliser le contenu
                    body = template['body'].replace('[LIEN_PHISHING]', target.get('phishing_url', '#'))
                    body = body.replace('[NOM]', target.get('name', 'Client'))
                    
                    msg.attach(MIMEText(body, 'plain'))
                    
                    # Envoyer l'email
                    server.send_message(msg)
                    
                    print(f"‚úÖ Email envoy√© √†: {target['email']}")
                    
                    # Enregistrer la victime
                    victim_info = {
                        'email': target['email'],
                        'name': target.get('name', 'Unknown'),
                        'sent_at': datetime.now().isoformat(),
                        'status': 'sent'
                    }
                    campaign['victims'].append(victim_info)
                    
                    time.sleep(random.uniform(1, 3))  # D√©lai al√©atoire
                    
                except Exception as e:
                    print(f"‚ùå Erreur envoi √† {target['email']}: {e}")
            
            server.quit()
            
            # Sauvegarder les r√©sultats
            with open(campaign_file, 'w', encoding='utf-8') as f:
                json.dump(campaign, f, indent=2)
            
            print(f"‚úÖ Campagne termin√©e: {len(campaign['victims'])} emails envoy√©s")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur envoi emails: {e}")
            return False
    
    def create_pretext_scenario(self, scenario_type, target_info):
        """Cr√©e un sc√©nario de pr√©texte"""
        print(f"üé≠ Cr√©ation sc√©nario: {scenario_type}")
        
        scenarios = {
            'bank_official': {
                'role': 'Agent bancaire',
                'urgency': 'Suspension de compte',
                'authority': 'Service de s√©curit√©',
                'action_required': 'V√©rification d\'identit√©'
            },
            'tech_support': {
                'role': 'Technicien support',
                'urgency': 'Probl√®me de s√©curit√©',
                'authority': '√âquipe technique',
                'action_required': 'Diagnostic syst√®me'
            },
            'government_official': {
                'role': 'Fonctionnaire gouvernemental',
                'urgency': 'Audit de s√©curit√©',
                'authority': 'Minist√®re de la s√©curit√©',
                'action_required': 'V√©rification de conformit√©'
            },
            'colleague': {
                'role': 'Coll√®gue de travail',
                'urgency': 'Projet urgent',
                'authority': '√âquipe projet',
                'action_required': 'Collaboration imm√©diate'
            }
        }
        
        scenario = scenarios.get(scenario_type, scenarios['bank_official'])
        
        pretext_script = f"""
üé≠ SCRIPT DE PR√âTEXTE - {scenario_type.upper()}

ROLE: {scenario['role']}
URGENCE: {scenario['urgency']}
AUTORIT√â: {scenario['authority']}
ACTION REQUISE: {scenario['action_required']}

TARGET: {target_info.get('name', 'Unknown')}
EMAIL: {target_info.get('email', 'Unknown')}
PHONE: {target_info.get('phone', 'Unknown')}

SCRIPT:
1. Introduction et identification
2. Pr√©sentation de l'urgence
3. Demande d'action imm√©diate
4. Cr√©ation de la pression
5. Obtention des informations

TECHNIQUES PSYCHOLOGIQUES:
- Autorit√© (uniforme, titre officiel)
- Urgence (d√©lai limit√©)
- R√©ciprocit√© (aide mutuelle)
- Engagement (petites demandes d'abord)
- Preuve sociale (autres ont d√©j√† coop√©r√©)
"""
        
        script_file = f"campaigns/pretext_{scenario_type}_{int(time.time())}.txt"
        os.makedirs("campaigns", exist_ok=True)
        
        with open(script_file, 'w', encoding='utf-8') as f:
            f.write(pretext_script)
        
        print(f"‚úÖ Script de pr√©texte cr√©√©: {script_file}")
        return script_file
    
    def create_vishing_script(self, target_info, pretext_type):
        """Cr√©e un script d'appel t√©l√©phonique frauduleux"""
        print(f"üìû Cr√©ation script vishing: {pretext_type}")
        
        vishing_scripts = {
            'bank_security': f"""
üìû SCRIPT VISHING - S√âCURIT√â BANCAIRE

CALLER: Bonjour, je suis [Nom] du service de s√©curit√© de [Banque].
TARGET: Bonjour.

CALLER: Je vous appelle concernant votre compte bancaire num√©ro [XXXX-XXXX-XXXX].
TARGET: Oui?

CALLER: Nous avons d√©tect√© une activit√© suspecte sur votre compte ce matin.
TARGET: Ah bon?

CALLER: Oui, plusieurs tentatives de connexion depuis [Pays √©tranger].
TARGET: Ce n'est pas moi!

CALLER: Exactement, c'est pourquoi nous avons bloqu√© temporairement votre compte.
TARGET: Comment je fais alors?

CALLER: Pour d√©bloquer, je dois v√©rifier votre identit√©. Pouvez-vous me confirmer:
- Votre date de naissance
- Votre code postal
- Les 4 derniers chiffres de votre carte

TARGET: [Donn√©es fournies]

CALLER: Parfait, votre compte sera d√©bloqu√© dans 10 minutes.
TARGET: Merci!

CALLER: De rien, bonne journ√©e!
""",
            'tech_support': f"""
üìû SCRIPT VISHING - SUPPORT TECHNIQUE

CALLER: Bonjour, je suis [Nom] du support technique [Entreprise].
TARGET: Bonjour.

CALLER: Nous avons d√©tect√© un virus sur votre ordinateur.
TARGET: Vraiment?

CALLER: Oui, il envoie des donn√©es sensibles vers des serveurs √©trangers.
TARGET: C'est grave?

CALLER: Tr√®s grave. Je peux vous aider √† le supprimer maintenant.
TARGET: Comment?

CALLER: Je vais vous guider. Ouvrez votre navigateur et allez sur [site malveillant].
TARGET: D'accord.

CALLER: Maintenant, t√©l√©chargez et installez le logiciel que je vous envoie.
TARGET: C'est fait.

CALLER: Parfait, le virus est maintenant supprim√©.
TARGET: Merci beaucoup!

CALLER: De rien, bonne journ√©e!
"""
        }
        
        script = vishing_scripts.get(pretext_type, vishing_scripts['bank_security'])
        
        script_file = f"campaigns/vishing_{pretext_type}_{int(time.time())}.txt"
        os.makedirs("campaigns", exist_ok=True)
        
        with open(script_file, 'w', encoding='utf-8') as f:
            f.write(script)
        
        print(f"‚úÖ Script vishing cr√©√©: {script_file}")
        return script_file
    
    def create_baiting_campaign(self, bait_type, location):
        """Cr√©e une campagne d'app√¢ts physiques"""
        print(f"üé£ Cr√©ation campagne d'app√¢ts: {bait_type}")
        
        bait_types = {
            'usb_drive': {
                'item': 'Cl√© USB',
                'content': 'Documents confidentiels',
                'malware': 'Auto-ex√©cution',
                'location': location
            },
            'cd_dvd': {
                'item': 'CD/DVD',
                'content': 'Logiciel gratuit',
                'malware': 'Autorun.inf',
                'location': location
            },
            'phone_charger': {
                'item': 'Chargeur USB',
                'content': 'Chargeur gratuit',
                'malware': 'Juice jacking',
                'location': location
            }
        }
        
        bait = bait_types.get(bait_type, bait_types['usb_drive'])
        
        campaign_data = {
            'type': 'baiting',
            'bait_type': bait_type,
            'item': bait['item'],
            'content': bait['content'],
            'malware': bait['malware'],
            'location': location,
            'created_at': datetime.now().isoformat(),
            'status': 'active'
        }
        
        campaign_file = f"campaigns/baiting_{bait_type}_{int(time.time())}.json"
        os.makedirs("campaigns", exist_ok=True)
        
        with open(campaign_file, 'w', encoding='utf-8') as f:
            json.dump(campaign_data, f, indent=2)
        
        print(f"‚úÖ Campagne d'app√¢ts cr√©√©e: {campaign_file}")
        return campaign_file
    
    def analyze_victim_psychology(self, victim_data):
        """Analyse la psychologie de la victime"""
        print(f"üß† Analyse psychologique de la victime")
        
        try:
            # Facteurs psychologiques
            factors = {
                'authority_compliance': random.uniform(0.6, 0.9),
                'urgency_susceptibility': random.uniform(0.5, 0.8),
                'social_proof_influence': random.uniform(0.4, 0.7),
                'reciprocity_tendency': random.uniform(0.6, 0.8),
                'commitment_consistency': random.uniform(0.5, 0.7)
            }
            
            # Recommandations d'attaque
            recommendations = []
            
            if factors['authority_compliance'] > 0.7:
                recommendations.append("Utiliser l'autorit√© (uniforme, titre officiel)")
            
            if factors['urgency_susceptibility'] > 0.6:
                recommendations.append("Cr√©er un sentiment d'urgence")
            
            if factors['social_proof_influence'] > 0.5:
                recommendations.append("Mentionner que d'autres ont d√©j√† coop√©r√©")
            
            if factors['reciprocity_tendency'] > 0.7:
                recommendations.append("Offrir un service en √©change")
            
            analysis = {
                'victim_id': victim_data.get('id', 'unknown'),
                'psychological_factors': factors,
                'recommendations': recommendations,
                'risk_level': 'high' if sum(factors.values()) / len(factors) > 0.7 else 'medium',
                'analyzed_at': datetime.now().isoformat()
            }
            
            # Sauvegarder l'analyse
            analysis_file = f"campaigns/psychology_{victim_data.get('id', 'unknown')}_{int(time.time())}.json"
            os.makedirs("campaigns", exist_ok=True)
            
            with open(analysis_file, 'w', encoding='utf-8') as f:
                json.dump(analysis, f, indent=2)
            
            print(f"‚úÖ Analyse psychologique sauvegard√©e: {analysis_file}")
            return analysis
            
        except Exception as e:
            print(f"‚ùå Erreur analyse psychologique: {e}")
            return None 